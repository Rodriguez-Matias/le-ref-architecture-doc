{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"development/","text":"Developing for Binbash Leverage \u00b6 This document explains how to get started with developing for Leverage Reference Architecture . It includes how to build, test, and release new versions. Quick Start \u00b6 Getting the code \u00b6 The code must be checked out from this same github.com repo inside the Binbash Leverage Github Organization . git clone git@github.com:binbashar/le-tf-infra-aws.git cd le-tf-infra-aws cd .. git clone git@github.com:binbashar/le-ansible-infra.git cd le-ansible-infra cd .. git clone git@github.com:binbashar/le-helm-infra cd le-helm-infra cd .. Initial developer environment build \u00b6 TODO Dependencies \u00b6 This guide requires you to install X v0.1 or newer. Deploying \u00b6 To deploy the Leverage Reference Architecture onto AWS. Please check the deployment guide Testing \u00b6 To run tests, just run... Releasing \u00b6 CircleCi PR auto-release job \u00b6 https://circleci.com/gh/binbashar/bb-devops-tf-infra-aws NOTE: Will only run after merged PR.","title":"Development"},{"location":"development/#developing-for-binbash-leverage","text":"This document explains how to get started with developing for Leverage Reference Architecture . It includes how to build, test, and release new versions.","title":"Developing for Binbash Leverage"},{"location":"development/#quick-start","text":"","title":"Quick Start"},{"location":"development/#getting-the-code","text":"The code must be checked out from this same github.com repo inside the Binbash Leverage Github Organization . git clone git@github.com:binbashar/le-tf-infra-aws.git cd le-tf-infra-aws cd .. git clone git@github.com:binbashar/le-ansible-infra.git cd le-ansible-infra cd .. git clone git@github.com:binbashar/le-helm-infra cd le-helm-infra cd ..","title":"Getting the code"},{"location":"development/#initial-developer-environment-build","text":"TODO","title":"Initial developer environment build"},{"location":"development/#dependencies","text":"This guide requires you to install X v0.1 or newer.","title":"Dependencies"},{"location":"development/#deploying","text":"To deploy the Leverage Reference Architecture onto AWS. Please check the deployment guide","title":"Deploying"},{"location":"development/#testing","text":"To run tests, just run...","title":"Testing"},{"location":"development/#releasing","text":"","title":"Releasing"},{"location":"development/#circleci-pr-auto-release-job","text":"https://circleci.com/gh/binbashar/bb-devops-tf-infra-aws NOTE: Will only run after merged PR.","title":"CircleCi PR auto-release job"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2017 - 2020 Binbash Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2017 - 2020 Binbash Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"support/","text":"Support \u00b6 Leverage Reference Architecture \u00b6 Please create a Github Issue to get immediate support from the Binbash Leverage Team Our Engineering & Support Team \u00b6 AWS Well Architected Review \u00b6 Feel free to contact us for an AWS Well Architected Framework Review Well Architected Framework Review Reference Study Case Operational Excellence Security Cost Optimization Reliability Performance Efficiency WAF Exta Material DevSecOps Security Audit - v0.1 WAF Cost Optimization Checklist - v0.1 Read More \u00b6 How AWS Well-Architected Reviews Can Drive a Customer-First Culture","title":"Support"},{"location":"support/#support","text":"","title":"Support"},{"location":"support/#leverage-reference-architecture","text":"Please create a Github Issue to get immediate support from the Binbash Leverage Team","title":"Leverage Reference Architecture"},{"location":"support/#our-engineering-support-team","text":"","title":"Our Engineering &amp; Support Team"},{"location":"support/#aws-well-architected-review","text":"Feel free to contact us for an AWS Well Architected Framework Review Well Architected Framework Review Reference Study Case Operational Excellence Security Cost Optimization Reliability Performance Efficiency WAF Exta Material DevSecOps Security Audit - v0.1 WAF Cost Optimization Checklist - v0.1","title":"AWS Well Architected Review"},{"location":"support/#read-more","text":"How AWS Well-Architected Reviews Can Drive a Customer-First Culture","title":"Read More"},{"location":"welcome/","text":"Welcome \u00b6 This is the documentation for the Leverage Reference Architecture . It is built around the AWS Well Architected Framework , using a Terraform , Ansible and Helm . An its compose of the following 3 main repos: le-tf-infra-aws le-ansible-infra le-helm-infra Getting Started \u00b6 See How it works for a whirlwind tour that will get you started. See User guide for a hands on help.","title":"Welcome"},{"location":"welcome/#welcome","text":"This is the documentation for the Leverage Reference Architecture . It is built around the AWS Well Architected Framework , using a Terraform , Ansible and Helm . An its compose of the following 3 main repos: le-tf-infra-aws le-ansible-infra le-helm-infra","title":"Welcome"},{"location":"welcome/#getting-started","text":"See How it works for a whirlwind tour that will get you started. See User guide for a hands on help.","title":"Getting Started"},{"location":"examples/","text":"Reference Architecture examples \u00b6 This directory contains a catalog of examples on how to run, configure and scale Leverage Reference Architecture. Please review the prerequisites before trying them. Category Name Description Complexity Level Organizations AWS Organization Orchestrate your Ref Architecture Multi-Account AWS Organization Intermediate K8s K8s Kops Setup a production scale K8s clusters via Terraform + Kops Advanced","title":"Introduction"},{"location":"examples/#reference-architecture-examples","text":"This directory contains a catalog of examples on how to run, configure and scale Leverage Reference Architecture. Please review the prerequisites before trying them. Category Name Description Complexity Level Organizations AWS Organization Orchestrate your Ref Architecture Multi-Account AWS Organization Intermediate K8s K8s Kops Setup a production scale K8s clusters via Terraform + Kops Advanced","title":"Reference Architecture examples"},{"location":"examples/PREREQUISITES/","text":"Prerequisites \u00b6 Many of the examples in this directory have common prerequisites .","title":"Prerequisites"},{"location":"examples/PREREQUISITES/#prerequisites","text":"Many of the examples in this directory have common prerequisites .","title":"Prerequisites"},{"location":"examples/k8s-kops/","text":"TODO: Add ref links here \u00b6","title":"K8s Kops"},{"location":"examples/k8s-kops/#todo-add-ref-links-here","text":"","title":"TODO: Add ref links here"},{"location":"examples/organization/","text":"TODO: Add ref links here \u00b6","title":"Organization"},{"location":"examples/organization/#todo-add-ref-links-here","text":"","title":"TODO: Add ref links here"},{"location":"first-steps/","text":"First Steps \u00b6 The objective of this sections is to explain the Binbash Leverage Reference AWS Cloud Solutions Architecture first steps. Overview \u00b6 TODO","title":"Overview"},{"location":"first-steps/#first-steps","text":"The objective of this sections is to explain the Binbash Leverage Reference AWS Cloud Solutions Architecture first steps.","title":"First Steps"},{"location":"first-steps/#overview","text":"TODO","title":"Overview"},{"location":"how-it-works/","text":"How it works \u00b6 The objective of this document is to explain how the Binbash Leverage Reference AWS Cloud Solutions Architecture works, in particular how the Reference Architecure model is built and why we need it. Overview \u00b6 This documentation contains all the guidelines to create Binbash Leverage Reference AWS Cloud Solutions Architecture that will be implemented on the Projects\u2019s AWS infrastructure. Our Purpose Democratize advanced technologies: As complex as it may sound, the basic idea behind this design principle is simple. It is not always possible for a business to maintain a capable in-house IT department while staying up to date. It is entirely feasible to set up your own cloud computing ecosystem from scratch without experience, but that would take a considerable amount of resources; it is definitely not the most efficient way to go. An efficient business-minded way to go is to employ AWS as a service allows organizations to benefit from the advanced technologies integrated into AWS without learning, researching, or creating teams specifically for those technologies. Info This documentation will provide a detailed reference of the tools and techs used, the needs they address and how they fit with the multiple practices we will be implementing. Reference Architecture \u00b6 Reference AWS Cloud Solutions architecture designed under optimal configs for the most popular modern web and mobile applications needs based on AWS \u201cWell Architected Framework\u201d . With it's complete Leverage DevOps Automation Code Library to rapidly implement it will solve your entire infrastructure and will grant you complete control of the source code and of course you'll be able to run it without us. Strengths Faster updates (new features and bug fixes). Better code quality and modules maturity (proven and tested). Supported by Binbash, and Open ones even by Binbash + 1000\u2019s of top talented Open Source community contributors. Development cost savings. Client keeps full rights to all commercial, modification, distribution, and private use of the code (No Lock-In) through forks inside their own Projects repos (open-source and commercially reusable via license MIT and Apache 2.0 - https://choosealicense.com/licenses/). Documented. Reusable, Supported & Customizable. Reference Architecture Design \u00b6 DevOps Workflow model \u00b6 Read More \u00b6 Related articles Don't get locked up into avoiding lock-in AWS Managed Services","title":"Overview"},{"location":"how-it-works/#how-it-works","text":"The objective of this document is to explain how the Binbash Leverage Reference AWS Cloud Solutions Architecture works, in particular how the Reference Architecure model is built and why we need it.","title":"How it works"},{"location":"how-it-works/#overview","text":"This documentation contains all the guidelines to create Binbash Leverage Reference AWS Cloud Solutions Architecture that will be implemented on the Projects\u2019s AWS infrastructure. Our Purpose Democratize advanced technologies: As complex as it may sound, the basic idea behind this design principle is simple. It is not always possible for a business to maintain a capable in-house IT department while staying up to date. It is entirely feasible to set up your own cloud computing ecosystem from scratch without experience, but that would take a considerable amount of resources; it is definitely not the most efficient way to go. An efficient business-minded way to go is to employ AWS as a service allows organizations to benefit from the advanced technologies integrated into AWS without learning, researching, or creating teams specifically for those technologies. Info This documentation will provide a detailed reference of the tools and techs used, the needs they address and how they fit with the multiple practices we will be implementing.","title":"Overview"},{"location":"how-it-works/#reference-architecture","text":"Reference AWS Cloud Solutions architecture designed under optimal configs for the most popular modern web and mobile applications needs based on AWS \u201cWell Architected Framework\u201d . With it's complete Leverage DevOps Automation Code Library to rapidly implement it will solve your entire infrastructure and will grant you complete control of the source code and of course you'll be able to run it without us. Strengths Faster updates (new features and bug fixes). Better code quality and modules maturity (proven and tested). Supported by Binbash, and Open ones even by Binbash + 1000\u2019s of top talented Open Source community contributors. Development cost savings. Client keeps full rights to all commercial, modification, distribution, and private use of the code (No Lock-In) through forks inside their own Projects repos (open-source and commercially reusable via license MIT and Apache 2.0 - https://choosealicense.com/licenses/). Documented. Reusable, Supported & Customizable.","title":"Reference Architecture"},{"location":"how-it-works/#reference-architecture-design","text":"","title":"Reference Architecture Design"},{"location":"how-it-works/#devops-workflow-model","text":"","title":"DevOps Workflow model"},{"location":"how-it-works/#read-more","text":"Related articles Don't get locked up into avoiding lock-in AWS Managed Services","title":"Read More"},{"location":"how-it-works/considerations/","text":"Important Considerations \u00b6 Assumptions AWS Regions: Multi Region setup \u2192 1ry: us-east-1 (N. Virginia) & 2ry: us-west-2 (Oregon). DevOps necessary repositories will be created. There will be feature branches ( ID-XXX -> master ) and either Binbash or the Client Engineers will be reviewers of each other and approvers (at least 1 approver). After deployment via IaC (Terraform, Ansible & Helm) all subsequent changes will be performed via versioned controlled code, by modifying the corresponding repository and running the proper IaC Automation execution. Will start the process via Local Workstations. Afterwards full exec automation will be considered via: Jenkins, CircleCI or Terraform Cloud Jobs (GitOps). Consideration: Note that any change manually performed will generate inconsistencies on the deployed resources (which left them out of governance and support scope). All AWS resources will be deployed via Terraform and rarely occasional CloudFormation, Python SDK & AWS CLI when the resource is not defined by Terraform (almost none scenario). All code and scripts will be included in the repository. Provisioning via Ansible for resources that need to be provisioned on an OS. Orchestration via Helm + Helmsfile for resources that need to be provisioned in Kubernetes (with Docker as preferred container engine). Infra as code deployments should run from the new ID-XXX or master branch. ID-XXX branch must be merged immediately (ASAP) via PR to the master branch. Consideration: validating that the changes within the code will only affect the desired target resources is the responsibility of the executor (to ensure everything is OK please consider exec after review/approved PR). All resources will be deployed in several new AWS accounts created inside the Client AWS Organization. Except for the AWS Legacy Account invitation to the AWS Org and OrganizationAccountAccessRole creation in it, there will be no intervention whatsoever in current Client Legacy Production account, unless required by Client authority and given a specific requirement. Info We will explore the details of all the relevant Client application stacks, CI/CD processes, monitoring, security, target service level objective (SLO) and others in a separate document.","title":"Considerations"},{"location":"how-it-works/considerations/#important-considerations","text":"Assumptions AWS Regions: Multi Region setup \u2192 1ry: us-east-1 (N. Virginia) & 2ry: us-west-2 (Oregon). DevOps necessary repositories will be created. There will be feature branches ( ID-XXX -> master ) and either Binbash or the Client Engineers will be reviewers of each other and approvers (at least 1 approver). After deployment via IaC (Terraform, Ansible & Helm) all subsequent changes will be performed via versioned controlled code, by modifying the corresponding repository and running the proper IaC Automation execution. Will start the process via Local Workstations. Afterwards full exec automation will be considered via: Jenkins, CircleCI or Terraform Cloud Jobs (GitOps). Consideration: Note that any change manually performed will generate inconsistencies on the deployed resources (which left them out of governance and support scope). All AWS resources will be deployed via Terraform and rarely occasional CloudFormation, Python SDK & AWS CLI when the resource is not defined by Terraform (almost none scenario). All code and scripts will be included in the repository. Provisioning via Ansible for resources that need to be provisioned on an OS. Orchestration via Helm + Helmsfile for resources that need to be provisioned in Kubernetes (with Docker as preferred container engine). Infra as code deployments should run from the new ID-XXX or master branch. ID-XXX branch must be merged immediately (ASAP) via PR to the master branch. Consideration: validating that the changes within the code will only affect the desired target resources is the responsibility of the executor (to ensure everything is OK please consider exec after review/approved PR). All resources will be deployed in several new AWS accounts created inside the Client AWS Organization. Except for the AWS Legacy Account invitation to the AWS Org and OrganizationAccountAccessRole creation in it, there will be no intervention whatsoever in current Client Legacy Production account, unless required by Client authority and given a specific requirement. Info We will explore the details of all the relevant Client application stacks, CI/CD processes, monitoring, security, target service level objective (SLO) and others in a separate document.","title":"Important Considerations"},{"location":"how-it-works/read-more/","text":"Read more \u00b6 Please consider some official AWS docs, blog post and whitepapers we've considered for the current Reference Solutions Architecture design: AWS Reference Articles CloudTrail for AWS Organizations: https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html Reserved Instances - Multi Account: https://aws.amazon.com/about-aws/whats-new/2019/07/amazon-ec2-on-demand-capacity-reservations-shared-across-multiple-aws-accounts/ AWS Multiple Account Security Strategy: https://d0.awsstatic.com/aws-answers/AWS_Multi_Account_Security_Strategy.pdf AWS Multiple Account Billing Strategy: https://aws.amazon.com/answers/account-management/aws-multi-account-billing-strategy/ AWS Secure Account Setup: https://aws.amazon.com/answers/security/aws-secure-account-setup/ Authentication and Access Control for AWS Organizations: https://docs.aws.amazon.com/organizations/latest/userguide/orgs_permissions.html AWS Regions: https://www.concurrencylabs.com/blog/choose-your-aws-region-wisely/ VPC Peering: https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html Route53 DNS VPC Associations: https://aws.amazon.com/premiumsupport/knowledge-center/private-hosted-zone-different-account/ AWS Well Architected Framework: https://aws.amazon.com/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/ AWS Tagging strategies: https://aws.amazon.com/answers/account-management/aws-tagging-strategies/ Inviting an AWS Account to Join Your Organization : https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html","title":"Read More"},{"location":"how-it-works/read-more/#read-more","text":"Please consider some official AWS docs, blog post and whitepapers we've considered for the current Reference Solutions Architecture design: AWS Reference Articles CloudTrail for AWS Organizations: https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html Reserved Instances - Multi Account: https://aws.amazon.com/about-aws/whats-new/2019/07/amazon-ec2-on-demand-capacity-reservations-shared-across-multiple-aws-accounts/ AWS Multiple Account Security Strategy: https://d0.awsstatic.com/aws-answers/AWS_Multi_Account_Security_Strategy.pdf AWS Multiple Account Billing Strategy: https://aws.amazon.com/answers/account-management/aws-multi-account-billing-strategy/ AWS Secure Account Setup: https://aws.amazon.com/answers/security/aws-secure-account-setup/ Authentication and Access Control for AWS Organizations: https://docs.aws.amazon.com/organizations/latest/userguide/orgs_permissions.html AWS Regions: https://www.concurrencylabs.com/blog/choose-your-aws-region-wisely/ VPC Peering: https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html Route53 DNS VPC Associations: https://aws.amazon.com/premiumsupport/knowledge-center/private-hosted-zone-different-account/ AWS Well Architected Framework: https://aws.amazon.com/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/ AWS Tagging strategies: https://aws.amazon.com/answers/account-management/aws-tagging-strategies/ Inviting an AWS Account to Join Your Organization : https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_invites.html","title":"Read more"},{"location":"how-it-works/cdn/cdn/","text":"CDN \u00b6 AWS Cloud Front Amazon CloudFront is a fast content delivery network (CDN) service that securely delivers data, videos, applications, and APIs to customers globally with low latency, high transfer speeds, all within a developer-friendly environment. CloudFront is integrated with AWS \u2013 both physical locations that are directly connected to the AWS global infrastructure, as well as other AWS services. CloudFront works seamlessly with services including AWS Shield for DDoS mitigation, Amazon S3, Elastic Load Balancing, API Gateway or Amazon EC2 as origins for your applications, and Lambda@Edge to run custom code closer to customers\u2019 users and to customize the user experience. Lastly, if you use AWS origins such as Amazon S3, Amazon EC2 or Elastic Load Balancing, you don\u2019t pay for any data transferred between these services and CloudFront. Load Balancer (ALB | NLB) & S3 Cloudfront Origins \u00b6 Figure: AWS CloudFront with ELB and S3 as origin diagram (just as reference). API Gateway Cloudfront Origins \u00b6 Figure: AWS CloudFront with API Gateway as origin diagram (just as reference).","title":"CDN"},{"location":"how-it-works/cdn/cdn/#cdn","text":"AWS Cloud Front Amazon CloudFront is a fast content delivery network (CDN) service that securely delivers data, videos, applications, and APIs to customers globally with low latency, high transfer speeds, all within a developer-friendly environment. CloudFront is integrated with AWS \u2013 both physical locations that are directly connected to the AWS global infrastructure, as well as other AWS services. CloudFront works seamlessly with services including AWS Shield for DDoS mitigation, Amazon S3, Elastic Load Balancing, API Gateway or Amazon EC2 as origins for your applications, and Lambda@Edge to run custom code closer to customers\u2019 users and to customize the user experience. Lastly, if you use AWS origins such as Amazon S3, Amazon EC2 or Elastic Load Balancing, you don\u2019t pay for any data transferred between these services and CloudFront.","title":"CDN"},{"location":"how-it-works/cdn/cdn/#load-balancer-alb-nlb-s3-cloudfront-origins","text":"Figure: AWS CloudFront with ELB and S3 as origin diagram (just as reference).","title":"Load Balancer (ALB | NLB) &amp; S3 Cloudfront Origins"},{"location":"how-it-works/cdn/cdn/#api-gateway-cloudfront-origins","text":"Figure: AWS CloudFront with API Gateway as origin diagram (just as reference).","title":"API Gateway Cloudfront Origins"},{"location":"how-it-works/ci-cd/ci-cd/","text":"Continuous Integration / Continuous Delivery (CI/CD) \u00b6 Opt-1: Jenkins + ArgoCD \u00b6 Figure: CI/CD with Jenkins + ArgoCD diagram (just as reference). Opt-2: Jenkins + Spinnaker \u00b6 Figure: CI/CD with Jenkins + Spinnaker diagram (just as reference).","title":"CI/CD"},{"location":"how-it-works/ci-cd/ci-cd/#continuous-integration-continuous-delivery-cicd","text":"","title":"Continuous Integration / Continuous Delivery (CI/CD)"},{"location":"how-it-works/ci-cd/ci-cd/#opt-1-jenkins-argocd","text":"Figure: CI/CD with Jenkins + ArgoCD diagram (just as reference).","title":"Opt-1: Jenkins + ArgoCD"},{"location":"how-it-works/ci-cd/ci-cd/#opt-2-jenkins-spinnaker","text":"Figure: CI/CD with Jenkins + Spinnaker diagram (just as reference).","title":"Opt-2: Jenkins + Spinnaker"},{"location":"how-it-works/code-library/code-library-specs/","text":"Tech Specifications \u00b6 As Code: Hundred of thousands lines of code written in Terraform Groovy (Jenkinsfiles) Ansible Makefiles + Bash Dockerfiles Helm Charts \"Stop reinventing the wheel, automated and fully as code automated (executable from a single source). as code. parameterized variables input parameters return / output parameters \"stop reinventing the wheel\" avoid re-building the same things more than X times. avoid wasting time. not healthy, not secure and slows us down. DoD of a highly reusable, configurable, and composible sub-modules which will be 100% modular equivalent to other programming languages functions - Example for terraform - https://www.terraform.io/docs/modules/usage.html (but can be propagated for other languages and tools): inputs, outputs parameters. code reuse (reusable): consider tf modules and sub-modules approach. testable by module / function. Since TF it's oriented to work through 3rd party API calls, then tests are more likely to be integration tests rather than unit tests . If we don't allow integration for terraform then we can't work at all. This has to be analyzed for every language we'll be using and how we implement it (terraform, cloudformation, ansible, python, bash, docker, kops and k8s kubeclt cmds) composition (composible): have multiple functions and use it together eg: def_add(x,y){return x+y} ; def_sub(x,y){return x-y}; sub(add(3,4), add(7,5)) abstraction (abstract away complexity): we have a very complex function but we only expose it's definition to the API, eg: def_ai_processing(data_set){very complex algorithm here}; ai_processing([our_data_set_here]) Avoid inline: blocks The configuration for some Terraform resources can be defined either as inline blocks or as separate resources. When creating a module, you should always use a separate resource. For example, the aws_route_table resource allows you to define routes via inline blocks. Otherwise, your module will be less flexible and configurable. So If you try to use a mix of both inline blocks and separate resources, you run into bugs where they will conflict and overwrite each other. Therefore, you must use one or the other (ref: https://blog.gruntwork.io/how-to-create-reusable-infrastructure-with-terraform-modules-25526d65f73d )) Use module-relative paths: The catch is that the file path you use has to be relative (since you could run Terraform on many different computers)\u200a\u2014\u200abut what is it relative to? By default, Terraform interprets the path relative to the working directory. That\u2019s a good default for normal Terraform templates, but it won\u2019t work if the file is part of a module. To solve this issue, always use a path variable in file paths. eg: resource \"aws_instance\" \"example\" { ami = \"ami-2d39803a\" instance_type = \"t2.micro\" user_data = \"${file(\"${path.module}/user-data.sh\")}\" } Solutions must be versioned So as to be able to manage them as a software product with releases and change log. In this way we'll be able to know which version is currently deployed in a certain client and consider it's upgrade. Env Parity Promote inmutable, versioned infra modules based across envs. Updated Continually make updates, additions, and fixes to the libraries and modules. Integrated \"push button environments (PBE)\" approach for our solutions. - TODO: FLOW DIAGRAM HERE Proven & Tested Customers & every commit goes through a suite of automated tests to gran code styling and functional testing. Develop a wrapper/jobs together with specific testing tools in order to grant the modules are working as expected. Ansible: https://www.jeffgeerling.com/blog/2018/testing-your-ansible-roles-molecule https://www.digitalocean.com/community/tutorials/how-to-test-ansible-roles-with-molecule-on-ubuntu-16-04 Terraform: gruntwork-io/terratest Cost savings The architecture for our Library / Code Modules helps an organization to analyze its current IT and DevSecOps Cloud strategy and identify areas where changes could lead to cost savings. For instance, the architecture may show that multiple database systems could be changed so only one product is used, reducing software and support costs. Provides a basis for reuse.The process of architecting can support both the use and creation of reusable assets. Reusable assets are beneficial to an organization, since they can reduce the overall cost of a system and also improve its quality, given that a reusable asset has already been proven. Full Code Access & No Lock-In You get access to 100% of the code under Open Source license ( https://choosealicense.com/ ) so If you ever choose to cancel, you keep rights to all the code. Documented Includes example code, use case and thorough documentation, such as README.md , --help command, doc-string and in line comments. Supported & Customizable Commercially maintained and supported by Binbash .","title":"Specifications"},{"location":"how-it-works/code-library/code-library-specs/#tech-specifications","text":"As Code: Hundred of thousands lines of code written in Terraform Groovy (Jenkinsfiles) Ansible Makefiles + Bash Dockerfiles Helm Charts \"Stop reinventing the wheel, automated and fully as code automated (executable from a single source). as code. parameterized variables input parameters return / output parameters \"stop reinventing the wheel\" avoid re-building the same things more than X times. avoid wasting time. not healthy, not secure and slows us down. DoD of a highly reusable, configurable, and composible sub-modules which will be 100% modular equivalent to other programming languages functions - Example for terraform - https://www.terraform.io/docs/modules/usage.html (but can be propagated for other languages and tools): inputs, outputs parameters. code reuse (reusable): consider tf modules and sub-modules approach. testable by module / function. Since TF it's oriented to work through 3rd party API calls, then tests are more likely to be integration tests rather than unit tests . If we don't allow integration for terraform then we can't work at all. This has to be analyzed for every language we'll be using and how we implement it (terraform, cloudformation, ansible, python, bash, docker, kops and k8s kubeclt cmds) composition (composible): have multiple functions and use it together eg: def_add(x,y){return x+y} ; def_sub(x,y){return x-y}; sub(add(3,4), add(7,5)) abstraction (abstract away complexity): we have a very complex function but we only expose it's definition to the API, eg: def_ai_processing(data_set){very complex algorithm here}; ai_processing([our_data_set_here]) Avoid inline: blocks The configuration for some Terraform resources can be defined either as inline blocks or as separate resources. When creating a module, you should always use a separate resource. For example, the aws_route_table resource allows you to define routes via inline blocks. Otherwise, your module will be less flexible and configurable. So If you try to use a mix of both inline blocks and separate resources, you run into bugs where they will conflict and overwrite each other. Therefore, you must use one or the other (ref: https://blog.gruntwork.io/how-to-create-reusable-infrastructure-with-terraform-modules-25526d65f73d )) Use module-relative paths: The catch is that the file path you use has to be relative (since you could run Terraform on many different computers)\u200a\u2014\u200abut what is it relative to? By default, Terraform interprets the path relative to the working directory. That\u2019s a good default for normal Terraform templates, but it won\u2019t work if the file is part of a module. To solve this issue, always use a path variable in file paths. eg: resource \"aws_instance\" \"example\" { ami = \"ami-2d39803a\" instance_type = \"t2.micro\" user_data = \"${file(\"${path.module}/user-data.sh\")}\" } Solutions must be versioned So as to be able to manage them as a software product with releases and change log. In this way we'll be able to know which version is currently deployed in a certain client and consider it's upgrade. Env Parity Promote inmutable, versioned infra modules based across envs. Updated Continually make updates, additions, and fixes to the libraries and modules. Integrated \"push button environments (PBE)\" approach for our solutions. - TODO: FLOW DIAGRAM HERE Proven & Tested Customers & every commit goes through a suite of automated tests to gran code styling and functional testing. Develop a wrapper/jobs together with specific testing tools in order to grant the modules are working as expected. Ansible: https://www.jeffgeerling.com/blog/2018/testing-your-ansible-roles-molecule https://www.digitalocean.com/community/tutorials/how-to-test-ansible-roles-with-molecule-on-ubuntu-16-04 Terraform: gruntwork-io/terratest Cost savings The architecture for our Library / Code Modules helps an organization to analyze its current IT and DevSecOps Cloud strategy and identify areas where changes could lead to cost savings. For instance, the architecture may show that multiple database systems could be changed so only one product is used, reducing software and support costs. Provides a basis for reuse.The process of architecting can support both the use and creation of reusable assets. Reusable assets are beneficial to an organization, since they can reduce the overall cost of a system and also improve its quality, given that a reusable asset has already been proven. Full Code Access & No Lock-In You get access to 100% of the code under Open Source license ( https://choosealicense.com/ ) so If you ever choose to cancel, you keep rights to all the code. Documented Includes example code, use case and thorough documentation, such as README.md , --help command, doc-string and in line comments. Supported & Customizable Commercially maintained and supported by Binbash .","title":"Tech Specifications"},{"location":"how-it-works/code-library/code-library/","text":"Leverage DevOps Automation Code Library \u00b6 Overview \u00b6 A collection of reusable, tested, production-ready E2E infrastructure as code solutions, leveraged by modules written in Terraform, Ansible, Jenkinsfiles, Dockerfiles, Helm charts and Makefiles). Model \u00b6 Our development model is strongly based on code reusability Reusability \u00b6 High level summary of the the code reusability efficiency Considerations Above detailed % are to be seen as estimates AWS PCI-DSS Reference article AWS HIPAA Reference article AWS GDPR Reference article Modules \u00b6 DevOps Automation Code Library development and implementation workflow","title":"Overview"},{"location":"how-it-works/code-library/code-library/#leverage-devops-automation-code-library","text":"","title":"Leverage DevOps Automation Code Library"},{"location":"how-it-works/code-library/code-library/#overview","text":"A collection of reusable, tested, production-ready E2E infrastructure as code solutions, leveraged by modules written in Terraform, Ansible, Jenkinsfiles, Dockerfiles, Helm charts and Makefiles).","title":"Overview"},{"location":"how-it-works/code-library/code-library/#model","text":"Our development model is strongly based on code reusability","title":"Model"},{"location":"how-it-works/code-library/code-library/#reusability","text":"High level summary of the the code reusability efficiency Considerations Above detailed % are to be seen as estimates AWS PCI-DSS Reference article AWS HIPAA Reference article AWS GDPR Reference article","title":"Reusability"},{"location":"how-it-works/code-library/code-library/#modules","text":"DevOps Automation Code Library development and implementation workflow","title":"Modules"},{"location":"how-it-works/code-library/modules-library-per-tech/","text":"DevOps Code Automation Library Modules \u00b6 Open Source Modules Repos \u00b6 Category URLs Ansible Galaxy Roles bb-leverage-ansible-roles-list Dockerfiles bb-leverage-dockerfiles-list Helm Charts bb-leverage-helm-charts-list Jenkinsfiles Library bb-leverage-jenkinsfiles-lib Terraform Modules bb-leverage-terraform-modules-list Open Source + Private Modules Repos (via GitHub Teams) \u00b6 Repositories Details Reference Architecture Most of the AWS resources are here, divided by account. Dockerfiles These are Terraform module we created/imported to build reusable resources / stacks. Ansible Playbooks & Roles Playbooks we use for provisioning servers such as Jenkins, Spinnaker, Vault, and so on. Jenkins Modules Module we use in our Jenkins pipelines to perform repeated tasks such as posting to Slack, interacting with AWS CLI, etc. CloudFormation Modules Local development via Docker Compose. Helm Charts Complementary Jenkins pipelines to clean docker images, unseal Vault, and more. Also SecOps jobs can be found here. Terraform Modules Jenkins pipelines, docker images, and other resources used for load testing.","title":"Modules per Tech"},{"location":"how-it-works/code-library/modules-library-per-tech/#devops-code-automation-library-modules","text":"","title":"DevOps Code Automation Library Modules"},{"location":"how-it-works/code-library/modules-library-per-tech/#open-source-modules-repos","text":"Category URLs Ansible Galaxy Roles bb-leverage-ansible-roles-list Dockerfiles bb-leverage-dockerfiles-list Helm Charts bb-leverage-helm-charts-list Jenkinsfiles Library bb-leverage-jenkinsfiles-lib Terraform Modules bb-leverage-terraform-modules-list","title":"Open Source Modules Repos"},{"location":"how-it-works/code-library/modules-library-per-tech/#open-source-private-modules-repos-via-github-teams","text":"Repositories Details Reference Architecture Most of the AWS resources are here, divided by account. Dockerfiles These are Terraform module we created/imported to build reusable resources / stacks. Ansible Playbooks & Roles Playbooks we use for provisioning servers such as Jenkins, Spinnaker, Vault, and so on. Jenkins Modules Module we use in our Jenkins pipelines to perform repeated tasks such as posting to Slack, interacting with AWS CLI, etc. CloudFormation Modules Local development via Docker Compose. Helm Charts Complementary Jenkins pipelines to clean docker images, unseal Vault, and more. Also SecOps jobs can be found here. Terraform Modules Jenkins pipelines, docker images, and other resources used for load testing.","title":"Open Source + Private Modules Repos (via GitHub Teams)"},{"location":"how-it-works/compute/k8s-eks/","text":"Kubernetes AWS EKS \u00b6 Amazon Elastic Kubernetes Services (EKS) is a managed service that makes it easy for you to run Kubernetes on AWS without needing to install and operate your own Kubernetes control plane or worker nodes. Core Feautres Highly Secure: EKS automatically applies the latest security patches to your cluster control plane. Multiple Availability Zones: EKS auto-detects and replaces unhealthy control plane nodes and provides on-demand, zero downtime upgrades and patching. Serverless Compute: EKS supports AWS Fargate to remove the need to provision and manage servers, improving security through application isolation by design. Built with the Community: AWS actively works with the Kubernetes community, including making contributions to the Kubernetes code base helping you take advantage of AWS services. Figure: AWS K8s EKS architecture diagram (just as reference).","title":"K8s EKS"},{"location":"how-it-works/compute/k8s-eks/#kubernetes-aws-eks","text":"Amazon Elastic Kubernetes Services (EKS) is a managed service that makes it easy for you to run Kubernetes on AWS without needing to install and operate your own Kubernetes control plane or worker nodes. Core Feautres Highly Secure: EKS automatically applies the latest security patches to your cluster control plane. Multiple Availability Zones: EKS auto-detects and replaces unhealthy control plane nodes and provides on-demand, zero downtime upgrades and patching. Serverless Compute: EKS supports AWS Fargate to remove the need to provision and manage servers, improving security through application isolation by design. Built with the Community: AWS actively works with the Kubernetes community, including making contributions to the Kubernetes code base helping you take advantage of AWS services. Figure: AWS K8s EKS architecture diagram (just as reference).","title":"Kubernetes AWS EKS"},{"location":"how-it-works/compute/k8s-kops/","text":"Kubernetes Kops \u00b6 Kops is an official Kubernetes project for managing production-grade Kubernetes clusters. Kops is currently the best tool to deploy Kubernetes clusters to Amazon Web Services. The project describes itself as kubectl for clusters. Core Features Open-source & supports AWS and GCE Deploy clusters to existing virtual private clouds (VPC) or create a new VPC from scratch Supports public & private topologies Provisions single or multiple master clusters Configurable bastion machines for SSH access to individual cluster nodes Built on a state-sync model for dry-runs and automatic idempotency Direct infrastructure manipulation, or works with CloudFormation and Terraform Rolling cluster updates Supports heterogeneous clusters by creating multiple instance groups Figure: AWS K8s Kops architecture diagram (just as reference).","title":"K8s Kops"},{"location":"how-it-works/compute/k8s-kops/#kubernetes-kops","text":"Kops is an official Kubernetes project for managing production-grade Kubernetes clusters. Kops is currently the best tool to deploy Kubernetes clusters to Amazon Web Services. The project describes itself as kubectl for clusters. Core Features Open-source & supports AWS and GCE Deploy clusters to existing virtual private clouds (VPC) or create a new VPC from scratch Supports public & private topologies Provisions single or multiple master clusters Configurable bastion machines for SSH access to individual cluster nodes Built on a state-sync model for dry-runs and automatic idempotency Direct infrastructure manipulation, or works with CloudFormation and Terraform Rolling cluster updates Supports heterogeneous clusters by creating multiple instance groups Figure: AWS K8s Kops architecture diagram (just as reference).","title":"Kubernetes Kops"},{"location":"how-it-works/compute/overview/","text":"Compute \u00b6 Containers and Serverless \u00b6 Overview In order to serve Client application workloads we propose to implement Kubernetes , and proceed to containerize all application stacks whenever it\u2019s the best solution (we\u2019ll also consider AWS Lambda for a Serverless approach when it fits better). Kubernetes is an open source container orchestration platform that eases the process of running containers across many different machines, scaling up or down by adding or removing containers when demand changes and provides high availability features. Also, it serves as an abstraction layer that will give Client the possibility, with minimal effort, to move the apps to other Kubernetes clusters running elsewhere, or a managed Kubernetes service such as AWS EKS, GCP GKE or others. Clusters will be provisioned with Kops and/or AWS EKS , which are solutions meant to orchestrate this compute engine in AWS. Whenever possible the initial version deployed will be the latest stable release. Figure: Kubernetes high level components architecture . Kubernetes addons \u00b6 Some possible K8s addons could be Security IAM Authenticator Networking Kubernetes Nginx Ingress Controller Linked2 (Service Mesh) Monitoring & Logs fluentd daemonset for elasticsearch logs kube-state-metrics prometheus node-exporter Distributed Tracing jaeger opencensus UI Dashboard kube-ops-view kubernetes-dashboard weave-scope Availability & Reliability autoscaler Velero (Backups) Utilities onetimesecret","title":"Overview"},{"location":"how-it-works/compute/overview/#compute","text":"","title":"Compute"},{"location":"how-it-works/compute/overview/#containers-and-serverless","text":"Overview In order to serve Client application workloads we propose to implement Kubernetes , and proceed to containerize all application stacks whenever it\u2019s the best solution (we\u2019ll also consider AWS Lambda for a Serverless approach when it fits better). Kubernetes is an open source container orchestration platform that eases the process of running containers across many different machines, scaling up or down by adding or removing containers when demand changes and provides high availability features. Also, it serves as an abstraction layer that will give Client the possibility, with minimal effort, to move the apps to other Kubernetes clusters running elsewhere, or a managed Kubernetes service such as AWS EKS, GCP GKE or others. Clusters will be provisioned with Kops and/or AWS EKS , which are solutions meant to orchestrate this compute engine in AWS. Whenever possible the initial version deployed will be the latest stable release. Figure: Kubernetes high level components architecture .","title":"Containers and Serverless"},{"location":"how-it-works/compute/overview/#kubernetes-addons","text":"Some possible K8s addons could be Security IAM Authenticator Networking Kubernetes Nginx Ingress Controller Linked2 (Service Mesh) Monitoring & Logs fluentd daemonset for elasticsearch logs kube-state-metrics prometheus node-exporter Distributed Tracing jaeger opencensus UI Dashboard kube-ops-view kubernetes-dashboard weave-scope Availability & Reliability autoscaler Velero (Backups) Utilities onetimesecret","title":"Kubernetes addons"},{"location":"how-it-works/compute/serverless/","text":"Serverless Compute \u00b6 As stated by AWS Serverless definitions What is serverless? Serverless is the native architecture of the cloud that enables you to shift more of your operational responsibilities to AWS, increasing your agility and innovation. Serverless allows you to build and run applications and services without thinking about servers. It eliminates infrastructure management tasks such as server or cluster provisioning, patching, operating system maintenance, and capacity provisioning. You can build them for nearly any type of application or backend service, and everything required to run and scale your application with high availability is handled for you. Why use serverless? Serverless enables you to build modern applications with increased agility and lower total cost of ownership. Building serverless applications means that your developers can focus on their core product instead of worrying about managing and operating servers or runtimes, either in the cloud or on-premises. This reduced overhead lets developers reclaim time and energy that can be spent on developing great products which scale and that are reliable. Figure: AWS serverless architecture (just as reference). Serverless Compute Services AWS Lambda lets you run code without provisioning or managing servers. You pay only for the compute time you consume - there is no charge when your code is not running. Lambda@Edge allows you to run Lambda functions at AWS Edge locations in response to Amazon CloudFront events. AWS Fargate is a purpose-built serverless compute engine for containers. Fargate scales and manages the infrastructure required to run your containers.","title":"Serverless"},{"location":"how-it-works/compute/serverless/#serverless-compute","text":"As stated by AWS Serverless definitions What is serverless? Serverless is the native architecture of the cloud that enables you to shift more of your operational responsibilities to AWS, increasing your agility and innovation. Serverless allows you to build and run applications and services without thinking about servers. It eliminates infrastructure management tasks such as server or cluster provisioning, patching, operating system maintenance, and capacity provisioning. You can build them for nearly any type of application or backend service, and everything required to run and scale your application with high availability is handled for you. Why use serverless? Serverless enables you to build modern applications with increased agility and lower total cost of ownership. Building serverless applications means that your developers can focus on their core product instead of worrying about managing and operating servers or runtimes, either in the cloud or on-premises. This reduced overhead lets developers reclaim time and energy that can be spent on developing great products which scale and that are reliable. Figure: AWS serverless architecture (just as reference). Serverless Compute Services AWS Lambda lets you run code without provisioning or managing servers. You pay only for the compute time you consume - there is no charge when your code is not running. Lambda@Edge allows you to run Lambda functions at AWS Edge locations in response to Amazon CloudFront events. AWS Fargate is a purpose-built serverless compute engine for containers. Fargate scales and manages the infrastructure required to run your containers.","title":"Serverless Compute"},{"location":"how-it-works/costs/costs/","text":"Cost Estmation & Optimization \u00b6 Opportunity to optimize resources \u00b6 Compute Usage of reserved EC2 instances for stable workloads (AWS Cost Explorer Reserved Optimization | Compute Optimizer - get a -$ of up to 42% vs On-Demand) Usage of Spot EC2 instances for fault-tolerant workloads (-$ by up to 90%). Use ASG to allow your EC2 fleet to +/- based on demand. Id EC2 w/ low-utiliz and -$ by stop / rightsize them. Compute Savings Plans to reduce EC2, Fargate and Lambda $ (Compute Savings Plans OK regardless of EC2 family, size, AZ, reg, OS or tenancy, OK for Fargate / Lambda too). Databases Usage of reserved RDS instances for stable workload databases. Monitoring & Automation AWS billing alarms + AWS Budget (forecasted account cost / RI Coverage) Notifications to Slack Activate AWS Trusted Advisor cost related results Id EBS w/ low-utiliz and -$ by snapshotting and then rm them Check underutilized EBS to be possibly shrinked or removed. Networking -> deleting idle LB -> Use LB check w/ RequestCount of > 100 past 7d. Setup Lambda nuke to automatically clean up AWS account resources. Setup lambda scheduler for stop and start resources on AWS (EC2, ASG & RDS) Storage & Network Traffic Check S3 usage and -$ by leveraging lower $ storage tiers. Use S3 Analytics, or automate mv for these objects into lower $ storage tier w/ Life Cycle Policies or w/ S3 Intelligent-Tiering. If DataTransferOut from EC2 to the public internet is significant $, consider implementing CloudFront. Consideration \u00b6 Reserved Instances Stable workloads will always run on reserved instances, the following calculation only considers 1yr. No Upfront mode, in which Client will not have to pay in advance but commits to this monthly usage and will be billed so, even if the instance type is not used. More aggressive Reservation strategies can be implemented to further reduce costs, these will have to be analyzed by business in conjunction with operations.","title":"Costs"},{"location":"how-it-works/costs/costs/#cost-estmation-optimization","text":"","title":"Cost Estmation &amp; Optimization"},{"location":"how-it-works/costs/costs/#opportunity-to-optimize-resources","text":"Compute Usage of reserved EC2 instances for stable workloads (AWS Cost Explorer Reserved Optimization | Compute Optimizer - get a -$ of up to 42% vs On-Demand) Usage of Spot EC2 instances for fault-tolerant workloads (-$ by up to 90%). Use ASG to allow your EC2 fleet to +/- based on demand. Id EC2 w/ low-utiliz and -$ by stop / rightsize them. Compute Savings Plans to reduce EC2, Fargate and Lambda $ (Compute Savings Plans OK regardless of EC2 family, size, AZ, reg, OS or tenancy, OK for Fargate / Lambda too). Databases Usage of reserved RDS instances for stable workload databases. Monitoring & Automation AWS billing alarms + AWS Budget (forecasted account cost / RI Coverage) Notifications to Slack Activate AWS Trusted Advisor cost related results Id EBS w/ low-utiliz and -$ by snapshotting and then rm them Check underutilized EBS to be possibly shrinked or removed. Networking -> deleting idle LB -> Use LB check w/ RequestCount of > 100 past 7d. Setup Lambda nuke to automatically clean up AWS account resources. Setup lambda scheduler for stop and start resources on AWS (EC2, ASG & RDS) Storage & Network Traffic Check S3 usage and -$ by leveraging lower $ storage tiers. Use S3 Analytics, or automate mv for these objects into lower $ storage tier w/ Life Cycle Policies or w/ S3 Intelligent-Tiering. If DataTransferOut from EC2 to the public internet is significant $, consider implementing CloudFront.","title":"Opportunity to optimize resources"},{"location":"how-it-works/costs/costs/#consideration","text":"Reserved Instances Stable workloads will always run on reserved instances, the following calculation only considers 1yr. No Upfront mode, in which Client will not have to pay in advance but commits to this monthly usage and will be billed so, even if the instance type is not used. More aggressive Reservation strategies can be implemented to further reduce costs, these will have to be analyzed by business in conjunction with operations.","title":"Consideration"},{"location":"how-it-works/database/database/","text":"Databases \u00b6 Overview \u00b6 Will implement AWS RDS databases matching the requirements of the current application stacks. If the region selected is the same your're actually using for your legacy AWS RDS instances we will be able to create a peering connection to existing databases in order to migrate the application stacks first, then databases. AWS RDS Specs RDS Instance Size Multi AZ Encryption: Yes Auto Minor version update Automated snapshots Snapshot retention","title":"Databases"},{"location":"how-it-works/database/database/#databases","text":"","title":"Databases"},{"location":"how-it-works/database/database/#overview","text":"Will implement AWS RDS databases matching the requirements of the current application stacks. If the region selected is the same your're actually using for your legacy AWS RDS instances we will be able to create a peering connection to existing databases in order to migrate the application stacks first, then databases. AWS RDS Specs RDS Instance Size Multi AZ Encryption: Yes Auto Minor version update Automated snapshots Snapshot retention","title":"Overview"},{"location":"how-it-works/database/mysql/","text":"RDS | MySQL \u00b6","title":"MySQL"},{"location":"how-it-works/database/mysql/#rds-mysql","text":"","title":"RDS | MySQL"},{"location":"how-it-works/database/postgres/","text":"RDS | PostgresSQL \u00b6","title":"PostgresSQL"},{"location":"how-it-works/database/postgres/#rds-postgressql","text":"","title":"RDS | PostgresSQL"},{"location":"how-it-works/identities/identities/","text":"Identity and Access Management (IAM) Layer \u00b6 Summary \u00b6 Having this official AWS resource as reference we've define a security account structure for managing multiple accounts. User Management Definitions IAM users will strictly be created and centralized in the Security account (member accounts IAM Users could be exceptionally created for very specific tools that still don\u2019t support IAM roles for cross-account auth). All access to resources within the Client organization will be assigned via policy documents attached to IAM roles or groups. All IAM roles and groups will have the least privileges required to properly work. IAM AWS and Customer managed policies will be defined, inline policies will be avoided whenever possible. All user management will be maintained as code and will reside in the DevOps repository. All users will have MFA enabled whenever possible (VPN and AWS Web Console). Root user credentials will be rotated and secured. MFA for root will be enabled. IAM Access Keys for root will be disabled. IAM root access will be monitored via CloudWatch Alerts. Why multi account IAM strategy? Creating a security relationship between accounts makes it even easier for companies to assess the security of AWS-based deployments, centralize security monitoring and management, manage identity and access, and provide audit and compliance monitoring services Figure: AWS Organization Security account structure for managing multiple accounts (just as reference). IAM Groups & Roles definition \u00b6 AWS Org member accounts IAM groups : Account Name AWS Org Member Accounts IAM Groups Admin Auditor DevOps DeployMaster project-root x project-security x x x x AWS Org member accounts IAM roles : Account Name AWS Org Member Accounts IAM Roles Admin Auditor DevOps DeployMaster OrganizationAccountAccessRole project-root x project-security x x x x project-shared x x x x x project-legacy x x x project-apps-devstg x x x x x project-apps-prd x x x x x","title":"Identities"},{"location":"how-it-works/identities/identities/#identity-and-access-management-iam-layer","text":"","title":"Identity and Access Management (IAM) Layer"},{"location":"how-it-works/identities/identities/#summary","text":"Having this official AWS resource as reference we've define a security account structure for managing multiple accounts. User Management Definitions IAM users will strictly be created and centralized in the Security account (member accounts IAM Users could be exceptionally created for very specific tools that still don\u2019t support IAM roles for cross-account auth). All access to resources within the Client organization will be assigned via policy documents attached to IAM roles or groups. All IAM roles and groups will have the least privileges required to properly work. IAM AWS and Customer managed policies will be defined, inline policies will be avoided whenever possible. All user management will be maintained as code and will reside in the DevOps repository. All users will have MFA enabled whenever possible (VPN and AWS Web Console). Root user credentials will be rotated and secured. MFA for root will be enabled. IAM Access Keys for root will be disabled. IAM root access will be monitored via CloudWatch Alerts. Why multi account IAM strategy? Creating a security relationship between accounts makes it even easier for companies to assess the security of AWS-based deployments, centralize security monitoring and management, manage identity and access, and provide audit and compliance monitoring services Figure: AWS Organization Security account structure for managing multiple accounts (just as reference).","title":"Summary"},{"location":"how-it-works/identities/identities/#iam-groups-roles-definition","text":"AWS Org member accounts IAM groups : Account Name AWS Org Member Accounts IAM Groups Admin Auditor DevOps DeployMaster project-root x project-security x x x x AWS Org member accounts IAM roles : Account Name AWS Org Member Accounts IAM Roles Admin Auditor DevOps DeployMaster OrganizationAccountAccessRole project-root x project-security x x x x project-shared x x x x x project-legacy x x x project-apps-devstg x x x x x project-apps-prd x x x x x","title":"IAM Groups &amp; Roles definition"},{"location":"how-it-works/monitoring/apm/","text":"Application Performance Monitoring (APM) and Business Performance \u00b6 Custom Prometheus BlackBox Exporter + Grafana & Elastic Application performance monitoring (APM) delivers real-time and trending data about your web application's performance and the level of satisfaction that your end users experience. With end to end transaction tracing and a variety of color-coded charts and reports, APM visualizes your data, down to the deepest code levels. Your DevOps teams don't need to guess whether a performance blocker comes from the app itself, CPU availability, database loads, or something else entirely unexpected. With APM, you can quickly identify potential problems before they affect your end users. APM's user interface provides both current and historical information about memory usage, CPU utilization, database query performance, web browser rendering performance, app availability and error analysis, external services, and other useful metrics. SLIs / KPIs \u00b6 Service Level Indicators (SLIs) latency throughput availability error rate KPI for business performance General DOM readiness Page render Apdex Mobile crash rate Web Session count Session duration Page views Error % Mobile App launches User counts Load time Crash rates Crash locations Error rates API errors KPI for app and infrastructure teams App/Infra Availability Throughput App/Api/Db Response time Memory footprint CPU workload DevOps Builds Commits Deploys Errors Support incidents MTTR Read More \u00b6 NewRelic | Optimize customer experience (KPIs)","title":"APM"},{"location":"how-it-works/monitoring/apm/#application-performance-monitoring-apm-and-business-performance","text":"Custom Prometheus BlackBox Exporter + Grafana & Elastic Application performance monitoring (APM) delivers real-time and trending data about your web application's performance and the level of satisfaction that your end users experience. With end to end transaction tracing and a variety of color-coded charts and reports, APM visualizes your data, down to the deepest code levels. Your DevOps teams don't need to guess whether a performance blocker comes from the app itself, CPU availability, database loads, or something else entirely unexpected. With APM, you can quickly identify potential problems before they affect your end users. APM's user interface provides both current and historical information about memory usage, CPU utilization, database query performance, web browser rendering performance, app availability and error analysis, external services, and other useful metrics.","title":"Application Performance Monitoring (APM) and Business Performance"},{"location":"how-it-works/monitoring/apm/#slis-kpis","text":"Service Level Indicators (SLIs) latency throughput availability error rate KPI for business performance General DOM readiness Page render Apdex Mobile crash rate Web Session count Session duration Page views Error % Mobile App launches User counts Load time Crash rates Crash locations Error rates API errors KPI for app and infrastructure teams App/Infra Availability Throughput App/Api/Db Response time Memory footprint CPU workload DevOps Builds Commits Deploys Errors Support incidents MTTR","title":"SLIs / KPIs"},{"location":"how-it-works/monitoring/apm/#read-more","text":"NewRelic | Optimize customer experience (KPIs)","title":"Read More"},{"location":"how-it-works/monitoring/logs/","text":"Logs \u00b6 Overview \u00b6 Centralized Logs Solution For this purpose we propose the usage of Elasticsearch + Kibana for database and visualization respectively. By deploying the Fluentd daemonset on the Kubernetes clusters we can send all logs from running pods to Elasticsearch, and with \u2018beat\u2019 we can send specific logs for resources outside of Kubernetes. There will be many components across the environment generating different types of logs: ALB access logs, s3 access logs, cloudfront access logs, application request logs, application error logs. Access logs on AWS based resources can be stored in a centralized bucket for that purpose, on the security account and given the need these can be streamed to Elasticsearch as well if needed. Figure: Monitoring metrics and log architecture diagram (just as reference). Alerting based on Logs Certain features that were only available under licence were recently made available by Elastic, and included in the open source project of Elasticsearch. Elastalert allow us to generate alerts based on certain log entries or even after counting a certain amount of a type of entry, providing great flexibility.","title":"Logs"},{"location":"how-it-works/monitoring/logs/#logs","text":"","title":"Logs"},{"location":"how-it-works/monitoring/logs/#overview","text":"Centralized Logs Solution For this purpose we propose the usage of Elasticsearch + Kibana for database and visualization respectively. By deploying the Fluentd daemonset on the Kubernetes clusters we can send all logs from running pods to Elasticsearch, and with \u2018beat\u2019 we can send specific logs for resources outside of Kubernetes. There will be many components across the environment generating different types of logs: ALB access logs, s3 access logs, cloudfront access logs, application request logs, application error logs. Access logs on AWS based resources can be stored in a centralized bucket for that purpose, on the security account and given the need these can be streamed to Elasticsearch as well if needed. Figure: Monitoring metrics and log architecture diagram (just as reference). Alerting based on Logs Certain features that were only available under licence were recently made available by Elastic, and included in the open source project of Elasticsearch. Elastalert allow us to generate alerts based on certain log entries or even after counting a certain amount of a type of entry, providing great flexibility.","title":"Overview"},{"location":"how-it-works/monitoring/metrics/","text":"Metrics \u00b6 There are metrics that are going to be of interest both in the infrastructure itself (CPU, Memory, disk) and also on application level (amount of non 200 responses, latency, % of errors) and we will have two key sources for this: Prometheus and AWS CloudWatch metrics . Metric collectors CloudWatch metrics: Is where amazon stores a great number of default metrics for each of its services. Useful data here can be interpreted and alerts can be generated with Cloudwatch alerts and can also be used as a source for Grafana. Although this is a very good offering, we have found it to be incomplete and highly bound to AWS services but not integrated enough with the rest of the ecosystem. Prometheus: This is an open source tool (by Soundcloud) that is essentially a time-series database. It stores metrics, and it has the advantage of being highly integrated with all Kubernetes things. In fact, Kubernetes is already publishing various metrics in Prometheus format \u201cout of the box\u201d. It\u2019s alerting capabilities are also remarkable, and it can all be kept as code in a repository. It has a big community behind it, and it\u2019s not far fetched at this point to include a library in your own application that provides you with the ability to create an endpoint that publishes certain metrics about your own application, that we can graph or alert based on them. Figure: Monitoring metrics and log architecture diagram (just as reference). Graphing metrics Grafana is the standard open source visualization tool which can be used on top of a variety of different data stores. It can use prometheus as a source, and there are many open source dashboards and plugins available that provide great visualization of how things are running, and we can also build our own if necessary. If something is left out of prometheus and already available in Cloudwatch metrics we can easily integrate it as a source for Grafana as well, and build dashboards that integrate these metrics and even do some intelligence on them coming from multiple origins. Figure: Grafana K8s cluster metrics monitoring dashboard screenshot (just as reference). Figure: Grafana K8s node metrics monitoring dashboard screenshot (just as reference). Alerting based on metrics Although Grafana already has alerting capabilities built in, we rather (most of the times) have Prometheus alerting engine configured, because we can have really customize and specify alerts. We can have them as code in their extremely readable syntax. Example: Figure: Prometheus Alert Manager CriticalRamUsage alert screenshot (just as reference).","title":"Metrics"},{"location":"how-it-works/monitoring/metrics/#metrics","text":"There are metrics that are going to be of interest both in the infrastructure itself (CPU, Memory, disk) and also on application level (amount of non 200 responses, latency, % of errors) and we will have two key sources for this: Prometheus and AWS CloudWatch metrics . Metric collectors CloudWatch metrics: Is where amazon stores a great number of default metrics for each of its services. Useful data here can be interpreted and alerts can be generated with Cloudwatch alerts and can also be used as a source for Grafana. Although this is a very good offering, we have found it to be incomplete and highly bound to AWS services but not integrated enough with the rest of the ecosystem. Prometheus: This is an open source tool (by Soundcloud) that is essentially a time-series database. It stores metrics, and it has the advantage of being highly integrated with all Kubernetes things. In fact, Kubernetes is already publishing various metrics in Prometheus format \u201cout of the box\u201d. It\u2019s alerting capabilities are also remarkable, and it can all be kept as code in a repository. It has a big community behind it, and it\u2019s not far fetched at this point to include a library in your own application that provides you with the ability to create an endpoint that publishes certain metrics about your own application, that we can graph or alert based on them. Figure: Monitoring metrics and log architecture diagram (just as reference). Graphing metrics Grafana is the standard open source visualization tool which can be used on top of a variety of different data stores. It can use prometheus as a source, and there are many open source dashboards and plugins available that provide great visualization of how things are running, and we can also build our own if necessary. If something is left out of prometheus and already available in Cloudwatch metrics we can easily integrate it as a source for Grafana as well, and build dashboards that integrate these metrics and even do some intelligence on them coming from multiple origins. Figure: Grafana K8s cluster metrics monitoring dashboard screenshot (just as reference). Figure: Grafana K8s node metrics monitoring dashboard screenshot (just as reference). Alerting based on metrics Although Grafana already has alerting capabilities built in, we rather (most of the times) have Prometheus alerting engine configured, because we can have really customize and specify alerts. We can have them as code in their extremely readable syntax. Example: Figure: Prometheus Alert Manager CriticalRamUsage alert screenshot (just as reference).","title":"Metrics"},{"location":"how-it-works/monitoring/monitoring/","text":"SRE & Monitoring: Metrics, Logs & Tracing \u00b6 Overview \u00b6 There are two key approaches that we will cover with the proposed tools, Logs based monitoring and Metrics based monitoring. Monitoring tools Metrics: Prometheus - node-exporter - blackbox-exporter - alert-manager Metrics Dashboard: Grafana Data Sources Prometheus CloudWatch Plugins piechart-panel devopsprodigy-kubegraf-app Centralized Logs: Elasticsearch-Fluent-Kibana (EFK) Query Logs Dashboards Alerts based on logs Distributed Tracing: Jaeger + Opensensus","title":"Monitoring"},{"location":"how-it-works/monitoring/monitoring/#sre-monitoring-metrics-logs-tracing","text":"","title":"SRE &amp; Monitoring: Metrics, Logs &amp; Tracing"},{"location":"how-it-works/monitoring/monitoring/#overview","text":"There are two key approaches that we will cover with the proposed tools, Logs based monitoring and Metrics based monitoring. Monitoring tools Metrics: Prometheus - node-exporter - blackbox-exporter - alert-manager Metrics Dashboard: Grafana Data Sources Prometheus CloudWatch Plugins piechart-panel devopsprodigy-kubegraf-app Centralized Logs: Elasticsearch-Fluent-Kibana (EFK) Query Logs Dashboards Alerts based on logs Distributed Tracing: Jaeger + Opensensus","title":"Overview"},{"location":"how-it-works/monitoring/notification_escalation/","text":"Notification & Escalation Procedure \u00b6 Overview \u00b6 Urgency Service Notification Setting Use When Response High 24/7 High-priority PagerDuty Alert 24/7/365 Issue is in Production Or affects the applications/services and in turn affects the normal operation of the clinics Or prevents clinic patients to interact with the applications/services Requires immediate human action Escalate as needed The engineer should be woken up High during support hours High-priority Slack Notifications during support hours Issue impacts development team productivity Issue impacts the normal business operation Requires immediate human action ONLY during business hours Low Low Priority Slack Notification Any issue, on any environment, that occurs during working hours Requires human action at some point Do not escalate An engineer should not be woken up Service Notification Settings \u00b6 Service Notification Setting Description High-priority PagerDuty Alert 24/7/365 Notify on-call engineers --- At first, notify via SMS/Push --- Notify via Phone Call if after 10 minutes the previous has not acknowledged Notify person X (this is a person who needs to be aware of any of these issues always) Notify to Slack => engineering-urgent-alerts channel High-priority Slack Notifications during support hours Notify to Slack => engineering-alerts channel Low Priority Slack Notification Notify to Slack => engineering-alerts channel Alert Types \u00b6 UpTimeRobot (black box) https://uptimerobot.com/ Sites or APIs are down Prometheus Alert Manager (black box, metrics-based) http://prometheus.aws.domain.com/ Clusters issues (masters/nodes high resources usage) Instance issues (Pritunl VPN, Jenkins, Spinnaker, Grafana, Kibana, etc) Alerts from Prometheus Blackbox Exporter Kibana ElastAlert (black box, logs-based) Intended for applications/services logs Applications/services issues (frontends, backend services) Cluster components issues (nginx-ingress, cert-manager, linkerd, etc) PagerDuty https://domain.pagerduty.com/ Incident management Implementation Reference Example \u00b6 Slack All alerts are sent to #engineering-urgent-alerts channel. Members that are online can have visibility from there. AlertManager takes care of sending such alerts according to the rules defined here: TODO Note: there is a channel named engineering-alerts but is used for Github notifications. It didn\u2019t make sense to mix real alerts with that, that is why a new engineering-urgent-alerts channel was created. As a recommendation, Github notifications should be sent to a channel named like #engineering-notifications and leave engineering-alerts for real alerts. PagerDuty AlertManager only sends to PagerDuty alerts that are labeled as severity: critical . PagerDuty is configured to turn these into incidents according to the settings defined here for the Prometheus Critical Alerts service . The aforementioned service uses HiPriorityAllYearRound escalation policy to define who gets notified and how. Note: currently only the TechOwnership role gets notified as we don\u2019t have agreements or rules about on-call support but this can be easily changed in the future to accommodate business decisions. UpTimeRobot We are doing basic http monitoring on the following sites: * www.domain_1.com * www.domain_2.com * www.domain_3.com Note: a personal account has been set up for this. As a recommendation, an new account should be created using an email account that belongs to Veev project.","title":"Notifications"},{"location":"how-it-works/monitoring/notification_escalation/#notification-escalation-procedure","text":"","title":"Notification &amp; Escalation Procedure"},{"location":"how-it-works/monitoring/notification_escalation/#overview","text":"Urgency Service Notification Setting Use When Response High 24/7 High-priority PagerDuty Alert 24/7/365 Issue is in Production Or affects the applications/services and in turn affects the normal operation of the clinics Or prevents clinic patients to interact with the applications/services Requires immediate human action Escalate as needed The engineer should be woken up High during support hours High-priority Slack Notifications during support hours Issue impacts development team productivity Issue impacts the normal business operation Requires immediate human action ONLY during business hours Low Low Priority Slack Notification Any issue, on any environment, that occurs during working hours Requires human action at some point Do not escalate An engineer should not be woken up","title":"Overview"},{"location":"how-it-works/monitoring/notification_escalation/#service-notification-settings","text":"Service Notification Setting Description High-priority PagerDuty Alert 24/7/365 Notify on-call engineers --- At first, notify via SMS/Push --- Notify via Phone Call if after 10 minutes the previous has not acknowledged Notify person X (this is a person who needs to be aware of any of these issues always) Notify to Slack => engineering-urgent-alerts channel High-priority Slack Notifications during support hours Notify to Slack => engineering-alerts channel Low Priority Slack Notification Notify to Slack => engineering-alerts channel","title":"Service Notification Settings"},{"location":"how-it-works/monitoring/notification_escalation/#alert-types","text":"UpTimeRobot (black box) https://uptimerobot.com/ Sites or APIs are down Prometheus Alert Manager (black box, metrics-based) http://prometheus.aws.domain.com/ Clusters issues (masters/nodes high resources usage) Instance issues (Pritunl VPN, Jenkins, Spinnaker, Grafana, Kibana, etc) Alerts from Prometheus Blackbox Exporter Kibana ElastAlert (black box, logs-based) Intended for applications/services logs Applications/services issues (frontends, backend services) Cluster components issues (nginx-ingress, cert-manager, linkerd, etc) PagerDuty https://domain.pagerduty.com/ Incident management","title":"Alert Types"},{"location":"how-it-works/monitoring/notification_escalation/#implementation-reference-example","text":"Slack All alerts are sent to #engineering-urgent-alerts channel. Members that are online can have visibility from there. AlertManager takes care of sending such alerts according to the rules defined here: TODO Note: there is a channel named engineering-alerts but is used for Github notifications. It didn\u2019t make sense to mix real alerts with that, that is why a new engineering-urgent-alerts channel was created. As a recommendation, Github notifications should be sent to a channel named like #engineering-notifications and leave engineering-alerts for real alerts. PagerDuty AlertManager only sends to PagerDuty alerts that are labeled as severity: critical . PagerDuty is configured to turn these into incidents according to the settings defined here for the Prometheus Critical Alerts service . The aforementioned service uses HiPriorityAllYearRound escalation policy to define who gets notified and how. Note: currently only the TechOwnership role gets notified as we don\u2019t have agreements or rules about on-call support but this can be easily changed in the future to accommodate business decisions. UpTimeRobot We are doing basic http monitoring on the following sites: * www.domain_1.com * www.domain_2.com * www.domain_3.com Note: a personal account has been set up for this. As a recommendation, an new account should be created using an email account that belongs to Veev project.","title":"Implementation Reference Example"},{"location":"how-it-works/monitoring/tracing/","text":"Distributed Tracing \u00b6 Solution Design Distributed tracing, also called distributed request tracing, is a method used to profile and monitor applications, especially those built using a microservices architecture. Distributed tracing helps pinpoint where failures occur and what causes poor performance. Figure: Distributed tracing architecture diagram (just as reference). Read more \u00b6 Related sources Jaeger Opensensus","title":"Tracing"},{"location":"how-it-works/monitoring/tracing/#distributed-tracing","text":"Solution Design Distributed tracing, also called distributed request tracing, is a method used to profile and monitor applications, especially those built using a microservices architecture. Distributed tracing helps pinpoint where failures occur and what causes poor performance. Figure: Distributed tracing architecture diagram (just as reference).","title":"Distributed Tracing"},{"location":"how-it-works/monitoring/tracing/#read-more","text":"Related sources Jaeger Opensensus","title":"Read more"},{"location":"how-it-works/network/dns/","text":"Route53 DNS hosted zones \u00b6 Route53 Considerations Route53 private hosted zone will have associations with VPCs on different AWS organization accounts Route53 should ideally be hosted in the Shared account, although sometimes Route53 is already deployed in a Legacy account where it can be imported and fully supported as code. Route53 zero downtime migration (active-active hosted zones) is completely possible and achieviable with Leverage terraform code Figure: AWS multi account Organization Route53 Association topology (just as reference).","title":"DNS"},{"location":"how-it-works/network/dns/#route53-dns-hosted-zones","text":"Route53 Considerations Route53 private hosted zone will have associations with VPCs on different AWS organization accounts Route53 should ideally be hosted in the Shared account, although sometimes Route53 is already deployed in a Legacy account where it can be imported and fully supported as code. Route53 zero downtime migration (active-active hosted zones) is completely possible and achieviable with Leverage terraform code Figure: AWS multi account Organization Route53 Association topology (just as reference).","title":"Route53 DNS hosted zones"},{"location":"how-it-works/network/vpc-peering/","text":"Diagram: Network Service (cross-account VPC peering ) \u00b6 Figure: AWS multi account Organization VPC Peering topology (just as reference). Figure: AWS multi account Organization VPC Peering routing (just as reference).","title":"VPC Peering"},{"location":"how-it-works/network/vpc-peering/#diagram-network-service-cross-account-vpc-peering","text":"Figure: AWS multi account Organization VPC Peering topology (just as reference). Figure: AWS multi account Organization VPC Peering routing (just as reference).","title":"Diagram: Network Service (cross-account VPC peering)"},{"location":"how-it-works/network/vpc/","text":"Network Layer \u00b6 In this section we detail all the network design related specifications VPCs CIDR blocks VPC Gateways: Internet, NAT, VPN. VPC Peerings VPC DNS Private Hosted Zones Associations. Network ACLS (NACLs) VPCs IP Addressing Plan (CIDR blocks sizing) \u00b6 Introduction VPCs can vary in size from 16 addresses (/28 netmask) to 65,536 addresses (/16 netmask). In order to size a VPC correctly, it is important to understand the number, types, and sizes of workloads expected to run in it, as well as workload elasticity and load balancing requirements. Keep in mind that there is no charge for using Amazon VPC (aside from EC2 charges), therefore cost should not be a factor when determining the appropriate size for your VPC, so make sure you size your VPC for growth. Moving workloads or AWS resources between networks is not a trivial task, so be generous in your IP address estimates to give yourself plenty of room to grow, deploy new workloads, or change your VPC design configuration from one to another. The majority of AWS customers use VPCs with a /16 netmask and subnets with /24 netmasks. The primary reason AWS customers select smaller VPC and subnet sizes is to avoid overlapping network addresses with existing networks. So having AWS single VPC Design we've choosen a Medium/Small VPC/Subnet addressing plan which would probably fit a broad range variety of use cases Networking - IP Addressing \u00b6 Starting CIDR Segment (AWS Org) AWS Org IP Addressing calculation is presented below based on segment 172.16.0.0.0/12 We started from 172.16.0.0.0/12 and subnetted to /20 Resulting in Total Subnets: 256 2 x AWS Account with Hosts/SubNet: 4094 1ry VPC + 2ry VPC 1ry VPC DR + 2ry VPC DR Individual CIDR Segments (VPCs) Then each of these are /20 to /24 Considering the whole Starting CIDR Segment (AWS Org) before declared, we'll start at 172.18.0.0/20 shared 1ry VPC CIDR: 172.18.0.0/24 2ry VPC CIDR: 172.18.16.0/24 1ry VPC DR CIDR: 172.18.32.0/24 2ry VPC DR CIDR: 172.18.48.0/24 apps-devstg 1ry VPC CIDR: 172.18.64.0/24 2ry VPC CIDR: 172.18.80.0/24 1ry VPC DR CIDR: 172.18.96.0/24 2ry VPC DR CIDR: 172.18.112.0/24 apps-prd 1ry VPC CIDR: 172.18.128.0/24 2ry VPC CIDR: 172.18.144.0/24 1ry VPC DR CIDR: 172.18.160.0/24 2ry VPC DR CIDR: 172.18.176.0/24 Resulting in Subnets: 16 x VPC VPC Subnets with Hosts/Net: 256. Eg: apps-devstg account \u2192 us-east-1 w/ 3 AZs \u2192 3 x Private Subnets /az + 3 x Public Subnets /az 1ry VPC CIDR: 172.18.64.0/24 Subnets: Private 172.18.64.0/24, 172.18.66.0/24 and 172.18.68.0/24 Public 172.18.65.0/24, 172.18.67.0/24 and 172.18.69.0/24 Planned VPCs \u00b6 Having defined the initial VPC that will be created in the different accounts that were defined, we are going to create subnets in each of these VPCs defining Private and Public subnets split among different availability zones: Subnet address Netmask Range of addresses Hosts Assignment 172.18.0.0/20 255.255.240.0 172.18.0.0 - 172.18.15.255 4094 1ry VPC: shared 172.18.16.0/20 255.255.240.0 172.18.16.0 - 172.18.31.255 4094 2ry VPC: shared 172.18.32.0/20 255.255.240.0 172.18.32.0 - 172.18.47.255 4094 1ry VPC DR: shared 172.18.48.0/20 255.255.240.0 172.18.48.0 - 172.18.63.255 4094 2ry VPC DR: shared 172.18.64.0/20 255.255.240.0 172.18.64.0 - 172.18.79.255 4094 1ry VPC: apps-devstg 172.18.80.0/20 255.255.240.0 172.18.80.0 - 172.18.95.255 4094 2ry VPC: apps-devstg 172.18.96.0/20 255.255.240.0 172.18.96.0 - 172.18.111.255 4094 1ry VPC DR: apps-devstg 172.18.112.0/20 255.255.240.0 172.18.112.0 - 172.18.127.255 4094 2ry VPC DR: apps-devstg 172.18.128.0/20 255.255.240.0 172.18.128.0 - 172.18.143.255 4094 1ry VPC: apps-prd 172.18.144.0/20 255.255.240.0 172.18.144.0 - 172.18.159.255 4094 2ry VPC: apps-prd 172.18.160.0/20 255.255.240.0 172.18.160.0 - 172.18.175.255 4094 1ry VPC DR: apps-prd 172.18.176.0/20 255.255.240.0 172.18.176.0 - 172.18.191.255 4094 2ry VPC DR: apps-prd Considerations \u00b6 Design considerations AWS EKS: Docker runs in the 172.17.0.0/16 CIDR range in Amazon EKS clusters. We recommend that your cluster's VPC subnets do not overlap this range. Otherwise, you will receive the following error: Error: : error upgrading connection: error dialing backend: dial tcp 172.17.nn.nn:10250: getsockopt: no route to host Read more: AWS EKS network requirements Reserved IP Addresses The first four IP addresses and the last IP address in each subnet CIDR block are not available for you to use, and cannot be assigned to an instance. For example, in a subnet with CIDR block 10.0.0.0/24, the following five IP addresses are reserved. For more AWS VPC Subnets IP addressing","title":"VPC"},{"location":"how-it-works/network/vpc/#network-layer","text":"In this section we detail all the network design related specifications VPCs CIDR blocks VPC Gateways: Internet, NAT, VPN. VPC Peerings VPC DNS Private Hosted Zones Associations. Network ACLS (NACLs)","title":"Network Layer"},{"location":"how-it-works/network/vpc/#vpcs-ip-addressing-plan-cidr-blocks-sizing","text":"Introduction VPCs can vary in size from 16 addresses (/28 netmask) to 65,536 addresses (/16 netmask). In order to size a VPC correctly, it is important to understand the number, types, and sizes of workloads expected to run in it, as well as workload elasticity and load balancing requirements. Keep in mind that there is no charge for using Amazon VPC (aside from EC2 charges), therefore cost should not be a factor when determining the appropriate size for your VPC, so make sure you size your VPC for growth. Moving workloads or AWS resources between networks is not a trivial task, so be generous in your IP address estimates to give yourself plenty of room to grow, deploy new workloads, or change your VPC design configuration from one to another. The majority of AWS customers use VPCs with a /16 netmask and subnets with /24 netmasks. The primary reason AWS customers select smaller VPC and subnet sizes is to avoid overlapping network addresses with existing networks. So having AWS single VPC Design we've choosen a Medium/Small VPC/Subnet addressing plan which would probably fit a broad range variety of use cases","title":"VPCs IP Addressing Plan (CIDR blocks sizing)"},{"location":"how-it-works/network/vpc/#networking-ip-addressing","text":"Starting CIDR Segment (AWS Org) AWS Org IP Addressing calculation is presented below based on segment 172.16.0.0.0/12 We started from 172.16.0.0.0/12 and subnetted to /20 Resulting in Total Subnets: 256 2 x AWS Account with Hosts/SubNet: 4094 1ry VPC + 2ry VPC 1ry VPC DR + 2ry VPC DR Individual CIDR Segments (VPCs) Then each of these are /20 to /24 Considering the whole Starting CIDR Segment (AWS Org) before declared, we'll start at 172.18.0.0/20 shared 1ry VPC CIDR: 172.18.0.0/24 2ry VPC CIDR: 172.18.16.0/24 1ry VPC DR CIDR: 172.18.32.0/24 2ry VPC DR CIDR: 172.18.48.0/24 apps-devstg 1ry VPC CIDR: 172.18.64.0/24 2ry VPC CIDR: 172.18.80.0/24 1ry VPC DR CIDR: 172.18.96.0/24 2ry VPC DR CIDR: 172.18.112.0/24 apps-prd 1ry VPC CIDR: 172.18.128.0/24 2ry VPC CIDR: 172.18.144.0/24 1ry VPC DR CIDR: 172.18.160.0/24 2ry VPC DR CIDR: 172.18.176.0/24 Resulting in Subnets: 16 x VPC VPC Subnets with Hosts/Net: 256. Eg: apps-devstg account \u2192 us-east-1 w/ 3 AZs \u2192 3 x Private Subnets /az + 3 x Public Subnets /az 1ry VPC CIDR: 172.18.64.0/24 Subnets: Private 172.18.64.0/24, 172.18.66.0/24 and 172.18.68.0/24 Public 172.18.65.0/24, 172.18.67.0/24 and 172.18.69.0/24","title":"Networking - IP Addressing"},{"location":"how-it-works/network/vpc/#planned-vpcs","text":"Having defined the initial VPC that will be created in the different accounts that were defined, we are going to create subnets in each of these VPCs defining Private and Public subnets split among different availability zones: Subnet address Netmask Range of addresses Hosts Assignment 172.18.0.0/20 255.255.240.0 172.18.0.0 - 172.18.15.255 4094 1ry VPC: shared 172.18.16.0/20 255.255.240.0 172.18.16.0 - 172.18.31.255 4094 2ry VPC: shared 172.18.32.0/20 255.255.240.0 172.18.32.0 - 172.18.47.255 4094 1ry VPC DR: shared 172.18.48.0/20 255.255.240.0 172.18.48.0 - 172.18.63.255 4094 2ry VPC DR: shared 172.18.64.0/20 255.255.240.0 172.18.64.0 - 172.18.79.255 4094 1ry VPC: apps-devstg 172.18.80.0/20 255.255.240.0 172.18.80.0 - 172.18.95.255 4094 2ry VPC: apps-devstg 172.18.96.0/20 255.255.240.0 172.18.96.0 - 172.18.111.255 4094 1ry VPC DR: apps-devstg 172.18.112.0/20 255.255.240.0 172.18.112.0 - 172.18.127.255 4094 2ry VPC DR: apps-devstg 172.18.128.0/20 255.255.240.0 172.18.128.0 - 172.18.143.255 4094 1ry VPC: apps-prd 172.18.144.0/20 255.255.240.0 172.18.144.0 - 172.18.159.255 4094 2ry VPC: apps-prd 172.18.160.0/20 255.255.240.0 172.18.160.0 - 172.18.175.255 4094 1ry VPC DR: apps-prd 172.18.176.0/20 255.255.240.0 172.18.176.0 - 172.18.191.255 4094 2ry VPC DR: apps-prd","title":"Planned VPCs"},{"location":"how-it-works/network/vpc/#considerations","text":"Design considerations AWS EKS: Docker runs in the 172.17.0.0/16 CIDR range in Amazon EKS clusters. We recommend that your cluster's VPC subnets do not overlap this range. Otherwise, you will receive the following error: Error: : error upgrading connection: error dialing backend: dial tcp 172.17.nn.nn:10250: getsockopt: no route to host Read more: AWS EKS network requirements Reserved IP Addresses The first four IP addresses and the last IP address in each subnet CIDR block are not available for you to use, and cannot be assigned to an instance. For example, in a subnet with CIDR block 10.0.0.0/24, the following five IP addresses are reserved. For more AWS VPC Subnets IP addressing","title":"Considerations"},{"location":"how-it-works/organization/accounts/","text":"AWS Organization Accounts description \u00b6 Our default AWS Organizations terraform layout solution includes 5 accounts + 1 or N Accts (if you invite pre-existing AWS Account/s). Account Description Root Organizations Used to manage configuration and access to AWS Org managed accounts. The AWS Organizations account provides the ability to create and financially manage member accounts, it contains AWS Organizations Service Control Policies(SCPs). Shared Services / Resources Reference for creating infrastructure shared services such as directory services, DNS, VPN Solution, Monitoring tools like Prometheus and Grafana, CI/CD server (Jenkins, Drone, Spinnaker, etc), centralized logging solution like ELK and Vault Server (Hashicorp Vault) Security Intended for centralized user management via IAM roles based cross-org auth approach (IAM roles per account to be assumed still needed. Also to centralize AWS CloudTrail and AWS Config logs, and used as the master AWS GuardDuty Account Legacy Your pre existing AWS Accounts to be invited as members of the new AWS Organization, probably several services and workloads are going to be progressively migrated to your new Accounts. Apps DevStg Host your DEV, QA and STG environment workloads Compute / Web App Servers (K8s Clusters and Lambda Functions), Load Balancers, DB Servers, Caching Services, Job queues & Servers, Data, Storage, CDN Apps Prod Host your PROD environment workloads Compute / Web App Servers (K8s Clusters and Lambda Functions), Load Balancers, DB Servers, Caching Services, Job queues & Servers, Data, Storage, CDN Account: Shared Services | Resources \u00b6 Account: Apps DevStg | Prod \u00b6","title":"Accounts"},{"location":"how-it-works/organization/accounts/#aws-organization-accounts-description","text":"Our default AWS Organizations terraform layout solution includes 5 accounts + 1 or N Accts (if you invite pre-existing AWS Account/s). Account Description Root Organizations Used to manage configuration and access to AWS Org managed accounts. The AWS Organizations account provides the ability to create and financially manage member accounts, it contains AWS Organizations Service Control Policies(SCPs). Shared Services / Resources Reference for creating infrastructure shared services such as directory services, DNS, VPN Solution, Monitoring tools like Prometheus and Grafana, CI/CD server (Jenkins, Drone, Spinnaker, etc), centralized logging solution like ELK and Vault Server (Hashicorp Vault) Security Intended for centralized user management via IAM roles based cross-org auth approach (IAM roles per account to be assumed still needed. Also to centralize AWS CloudTrail and AWS Config logs, and used as the master AWS GuardDuty Account Legacy Your pre existing AWS Accounts to be invited as members of the new AWS Organization, probably several services and workloads are going to be progressively migrated to your new Accounts. Apps DevStg Host your DEV, QA and STG environment workloads Compute / Web App Servers (K8s Clusters and Lambda Functions), Load Balancers, DB Servers, Caching Services, Job queues & Servers, Data, Storage, CDN Apps Prod Host your PROD environment workloads Compute / Web App Servers (K8s Clusters and Lambda Functions), Load Balancers, DB Servers, Caching Services, Job queues & Servers, Data, Storage, CDN","title":"AWS Organization Accounts description"},{"location":"how-it-works/organization/accounts/#account-shared-services-resources","text":"","title":"Account: Shared Services | Resources"},{"location":"how-it-works/organization/accounts/#account-apps-devstg-prod","text":"","title":"Account: Apps DevStg | Prod"},{"location":"how-it-works/organization/organization/","text":"Reference Architecture: Terraform AWS Organizations Account Baseline \u00b6 Overview \u00b6 This repository contains all Terraform configuration files used to create Binbash Leverage Reference AWS Organizations Multi-Account baseline layout. Why AWS Organizations? This approach allows it to have a hierarchical structure of AWS accounts, providing additional security isolation and the ability to separate resources into Organizational Units with it associated Service Control Policies (SCP). Considering that a current AWS account/s was/were already active (Client AWS Legacy Account), this one will then be invited to be a \u201cmember account\u201d of the AWS Organization architecture. In the future, once all Client\u2019s Legacy dev, stage, prod and other resources for the Project applications are running in the new accounts architecture, meaning a full AWS Organizations approach, all the already migrated assets from the \u2018Legacy\u2019 account should be decommissioned. This account will remain with the necessary services, such as DNS, among others. AWS Organization Accounts Layout \u00b6 The following block provides a brief explanation of the chosen AWS Organization Accounts layout: + devstg/ (resources for dev apps/services account) ... + prod/ (resources for prod apps/services account) ... + root/ (resources for the root-org account) ... + security/ (resources for the security + users account) ... + shared/ (resources for the shared account) ... + legacy/ (resources for the legacy/pre-existing account) ... NOTE: Image just as reference Benefits of AWS Organizations Billing: Consolidated billing for all your accounts within organization, enhanced per account cost filtering and RI usage Security I: Extra security layer: You get fully isolated infrastructure for different organizations units in your projects, eg: Dev, Prod, Shared Resources, Security, Users, BI, etc. Security II: Using AWS Organization you may use Service Control Policies (SCPs) to control which AWS services are available within different accounts. Networking: Connectivity and access will be securely setup via VPC peering + NACLS + Sec Groups everything with private endpoints only accessible v\u00eda Pritunl VPN significantly reducing the surface of attack. User Mgmt: You can manage all your IAM resources (users/groups/roles) and policies in one place (usually, security/users account) and use AssumeRole to works with org accounts. Operations: Will reduce the blast radius to the maximum possible. Compatibility: Legacy accounts can (probably should) be invited as a member of the new Organization and afterwards even imported into your terraform code . Migration: After having your baseline AWS Org reference cloud solutions architecture deployed (IAM, VPC, NACLS, VPC-Peering, DNS Cross-Org, CloudTrail, etc.) you're ready to start progressively orchestrating new resources in order to segregate different Environment and Services per account. This approach will allow you to start a 1 by 1 Blue/Green (Red/Black) migration without affecting any of your services at all . You would like to take advantage of an Active-Active DNS switchover approach (nice as DR exercise too). EXAMPLE: Jenkins CI Server Migration steps: Let's say you have your EC2_A ( jenkins.aws.domain.com ) in Account_A (Legacy), so you could deploy a brand new EC2_B Jenkins Instance in Account_B (Shared Resources). Temporally associated with jenkins2.aws.domain.com Sync it's current data ( /var/lib/jenkins ) Test and fully validate every job and pipeline works as expected. In case you haven't finished your validations we highly recommend to declare everything as code and fully automated so as to destroy and re-create your under development env on demand to save costs. Finally switch jenkins2.aws.domain.com -> to -> jenkins.aws.domain.com Stop your old EC2_A. If everything looks fine after after 2/4 weeks you could terminate your EC2_A (hope everything is as code and just terraform destroy ) Considering the previously detailed steps plan your roadmap to move forward with every other component to be migrated. Read more \u00b6 AWS reference links Consider the following AWS official links as reference: AWS Multiple Account User Management Strategy AWS Muttiple Account Security Strategy AWS Multiple Account Billing Strategy AWS Secure Account Setup Authentication and Access Control for AWS Organizations (keep in mind EC2 and other services can also use AWS IAM Roles to get secure cross-account access)","title":"Organizaion"},{"location":"how-it-works/organization/organization/#reference-architecture-terraform-aws-organizations-account-baseline","text":"","title":"Reference Architecture: Terraform AWS Organizations Account Baseline"},{"location":"how-it-works/organization/organization/#overview","text":"This repository contains all Terraform configuration files used to create Binbash Leverage Reference AWS Organizations Multi-Account baseline layout. Why AWS Organizations? This approach allows it to have a hierarchical structure of AWS accounts, providing additional security isolation and the ability to separate resources into Organizational Units with it associated Service Control Policies (SCP). Considering that a current AWS account/s was/were already active (Client AWS Legacy Account), this one will then be invited to be a \u201cmember account\u201d of the AWS Organization architecture. In the future, once all Client\u2019s Legacy dev, stage, prod and other resources for the Project applications are running in the new accounts architecture, meaning a full AWS Organizations approach, all the already migrated assets from the \u2018Legacy\u2019 account should be decommissioned. This account will remain with the necessary services, such as DNS, among others.","title":"Overview"},{"location":"how-it-works/organization/organization/#aws-organization-accounts-layout","text":"The following block provides a brief explanation of the chosen AWS Organization Accounts layout: + devstg/ (resources for dev apps/services account) ... + prod/ (resources for prod apps/services account) ... + root/ (resources for the root-org account) ... + security/ (resources for the security + users account) ... + shared/ (resources for the shared account) ... + legacy/ (resources for the legacy/pre-existing account) ... NOTE: Image just as reference Benefits of AWS Organizations Billing: Consolidated billing for all your accounts within organization, enhanced per account cost filtering and RI usage Security I: Extra security layer: You get fully isolated infrastructure for different organizations units in your projects, eg: Dev, Prod, Shared Resources, Security, Users, BI, etc. Security II: Using AWS Organization you may use Service Control Policies (SCPs) to control which AWS services are available within different accounts. Networking: Connectivity and access will be securely setup via VPC peering + NACLS + Sec Groups everything with private endpoints only accessible v\u00eda Pritunl VPN significantly reducing the surface of attack. User Mgmt: You can manage all your IAM resources (users/groups/roles) and policies in one place (usually, security/users account) and use AssumeRole to works with org accounts. Operations: Will reduce the blast radius to the maximum possible. Compatibility: Legacy accounts can (probably should) be invited as a member of the new Organization and afterwards even imported into your terraform code . Migration: After having your baseline AWS Org reference cloud solutions architecture deployed (IAM, VPC, NACLS, VPC-Peering, DNS Cross-Org, CloudTrail, etc.) you're ready to start progressively orchestrating new resources in order to segregate different Environment and Services per account. This approach will allow you to start a 1 by 1 Blue/Green (Red/Black) migration without affecting any of your services at all . You would like to take advantage of an Active-Active DNS switchover approach (nice as DR exercise too). EXAMPLE: Jenkins CI Server Migration steps: Let's say you have your EC2_A ( jenkins.aws.domain.com ) in Account_A (Legacy), so you could deploy a brand new EC2_B Jenkins Instance in Account_B (Shared Resources). Temporally associated with jenkins2.aws.domain.com Sync it's current data ( /var/lib/jenkins ) Test and fully validate every job and pipeline works as expected. In case you haven't finished your validations we highly recommend to declare everything as code and fully automated so as to destroy and re-create your under development env on demand to save costs. Finally switch jenkins2.aws.domain.com -> to -> jenkins.aws.domain.com Stop your old EC2_A. If everything looks fine after after 2/4 weeks you could terminate your EC2_A (hope everything is as code and just terraform destroy ) Considering the previously detailed steps plan your roadmap to move forward with every other component to be migrated.","title":"AWS Organization Accounts Layout"},{"location":"how-it-works/organization/organization/#read-more","text":"AWS reference links Consider the following AWS official links as reference: AWS Multiple Account User Management Strategy AWS Muttiple Account Security Strategy AWS Multiple Account Billing Strategy AWS Secure Account Setup Authentication and Access Control for AWS Organizations (keep in mind EC2 and other services can also use AWS IAM Roles to get secure cross-account access)","title":"Read more"},{"location":"how-it-works/reliability/backups/","text":"Backups \u00b6 AWS Backup \u00b6 As defined by AWS AWS Backup is a fully managed backup service that makes it easy to centralize and automate the backup of data across AWS services. Using AWS Backup, you can centrally configure backup policies and monitor backup activity for AWS resources, such as: Amazon EBS volumes , Amazon EC2 instances , Amazon RDS databases , Amazon DynamoDB tables , Amazon EFS file systems , and AWS Storage Gateway volumes . AWS Backup automates and consolidates backup tasks previously performed service-by-service, removing the need to create custom scripts and manual processes. With just a few clicks in the AWS Backup console, you can create backup policies that automate backup schedules and retention management. AWS Backup provides a fully managed, policy-based backup solution, simplifying your backup management, enabling you to meet your business and regulatory backup compliance requirements. Figure: AWS Backup service diagram (just as reference). S3 bucket region replication \u00b6 Buckets that hold data critical to business or to application operation can be replicated to another region almost synchronously. This can be setup on request to increase durability and along with database backup can constitute the base for a Business Continuity strategy.","title":"Backups"},{"location":"how-it-works/reliability/backups/#backups","text":"","title":"Backups"},{"location":"how-it-works/reliability/backups/#aws-backup","text":"As defined by AWS AWS Backup is a fully managed backup service that makes it easy to centralize and automate the backup of data across AWS services. Using AWS Backup, you can centrally configure backup policies and monitor backup activity for AWS resources, such as: Amazon EBS volumes , Amazon EC2 instances , Amazon RDS databases , Amazon DynamoDB tables , Amazon EFS file systems , and AWS Storage Gateway volumes . AWS Backup automates and consolidates backup tasks previously performed service-by-service, removing the need to create custom scripts and manual processes. With just a few clicks in the AWS Backup console, you can create backup policies that automate backup schedules and retention management. AWS Backup provides a fully managed, policy-based backup solution, simplifying your backup management, enabling you to meet your business and regulatory backup compliance requirements. Figure: AWS Backup service diagram (just as reference).","title":"AWS Backup"},{"location":"how-it-works/reliability/backups/#s3-bucket-region-replication","text":"Buckets that hold data critical to business or to application operation can be replicated to another region almost synchronously. This can be setup on request to increase durability and along with database backup can constitute the base for a Business Continuity strategy.","title":"S3 bucket region replication"},{"location":"how-it-works/reliability/dr/","text":"Disaster Recovery & Business Continuity Plan \u00b6 Overview \u00b6 Applications that are business critical should always have a plan in place to recover in case of a catastrophic failure or disaster. There are many strategies that can be implemented to achieve this, and deciding between them is a matter of analyzing how much is worth to invest based on calculation of damages suffered if the application is not available for a given period of time. It is based on this factor (time) that disaster recovery plans are based on. Factors that need to be determined per application are: RTO and RPO Recovery time objective (RTO): This represents the time it takes after a disruption to restore a business process to its service level. For example, if a disaster occurs at 12:00 PM (noon) and the RTO is eight hours, the DR process should restore the business process to the acceptable service level by 8:00 PM. Recovery point objective (RPO): This is the acceptable amount of data loss measured in time. For example, if a disaster occurs at 12:00 PM (noon) and the RPO is one hour, the system should recover all data that was in the system before that hour. High Availability Configuration Strategies \u00b6 After deciding RTO and RPO we have options available to achieve the time objectives: HA Strategies Backup and restore: In most traditional environments, data is backed up to tape and sent off-site regularly. The equivalent in AWS would be to take backups in the form of snapshots and copy them to another region for RDS instances, EBS volumes, EFS and S3 buckets. The plan details the step-by-step procedure to recover a fully working production environment based on these backups being restored on freshly provisioned infrastructure, and how to rollback to a regular production site once the emergency is over. Pilot Light Method: The term pilot light is often used to describe a DR scenario in which a minimal version of an environment is always running in AWS. Very similar to \u201cBackup and restore\u201d except a minimal version of key infrastructure components is provisioned in a separate region and then scaled up in case of disaster declaration. Warm standby active-passive method: The term warm-standby is used to describe a DR scenario in which a scaled-down version of a fully-functional environment is always running in the cloud. Enhancement of Pilot Light in which a minimal version is created of all components, not just critical ones. Multi-Region active-active method: By architecting multi region applications and using DNS to balance between them in normal production status, you can adjust the DNS weighting and send all traffic to the AWS region that is available, this can even be performed automatically with Route53 or other DNS services that provide health check mechanisms as well as load balancing.","title":"Disaster Recovery"},{"location":"how-it-works/reliability/dr/#disaster-recovery-business-continuity-plan","text":"","title":"Disaster Recovery &amp; Business Continuity Plan"},{"location":"how-it-works/reliability/dr/#overview","text":"Applications that are business critical should always have a plan in place to recover in case of a catastrophic failure or disaster. There are many strategies that can be implemented to achieve this, and deciding between them is a matter of analyzing how much is worth to invest based on calculation of damages suffered if the application is not available for a given period of time. It is based on this factor (time) that disaster recovery plans are based on. Factors that need to be determined per application are: RTO and RPO Recovery time objective (RTO): This represents the time it takes after a disruption to restore a business process to its service level. For example, if a disaster occurs at 12:00 PM (noon) and the RTO is eight hours, the DR process should restore the business process to the acceptable service level by 8:00 PM. Recovery point objective (RPO): This is the acceptable amount of data loss measured in time. For example, if a disaster occurs at 12:00 PM (noon) and the RPO is one hour, the system should recover all data that was in the system before that hour.","title":"Overview"},{"location":"how-it-works/reliability/dr/#high-availability-configuration-strategies","text":"After deciding RTO and RPO we have options available to achieve the time objectives: HA Strategies Backup and restore: In most traditional environments, data is backed up to tape and sent off-site regularly. The equivalent in AWS would be to take backups in the form of snapshots and copy them to another region for RDS instances, EBS volumes, EFS and S3 buckets. The plan details the step-by-step procedure to recover a fully working production environment based on these backups being restored on freshly provisioned infrastructure, and how to rollback to a regular production site once the emergency is over. Pilot Light Method: The term pilot light is often used to describe a DR scenario in which a minimal version of an environment is always running in AWS. Very similar to \u201cBackup and restore\u201d except a minimal version of key infrastructure components is provisioned in a separate region and then scaled up in case of disaster declaration. Warm standby active-passive method: The term warm-standby is used to describe a DR scenario in which a scaled-down version of a fully-functional environment is always running in the cloud. Enhancement of Pilot Light in which a minimal version is created of all components, not just critical ones. Multi-Region active-active method: By architecting multi region applications and using DNS to balance between them in normal production status, you can adjust the DNS weighting and send all traffic to the AWS region that is available, this can even be performed automatically with Route53 or other DNS services that provide health check mechanisms as well as load balancing.","title":"High Availability Configuration Strategies"},{"location":"how-it-works/reliability/helth-checks/","text":"","title":"Helth checks"},{"location":"how-it-works/reliability/high-availability/","text":"High Availability & Helthchecks \u00b6 Recovery from Failures \u00b6 Automatic recovery from failure It keeps an AWS environment reliable. Using logs and metrics from CloudWatch, designing a system where the failures themselves trigger recovery is the way to move forward. Figure: AWS HA architecture diagrams (just as reference). Recovery Procedures \u00b6 Test recovery procedures The risks faced by cloud environment and systems, the points of failure for systems and ecosystems, as well as details about the most probable attacks are known and can be simulated. Testing recovery procedures are something that can be done using these insights. Real points of failure are exploited and the way the environment reacts to the emergency shows just how reliable the system it. Figure: AWS HA architecture diagrams (just as reference). Scalability and Availability \u00b6 Scale horizontally to increase aggregate system availability The cloud environment needs to have multiple redundancies and additional modules as added security measures. Of course, multiple redundancies require good management and maintenance for them to remain active through the environment\u2019s lifecycle. Figure: AWS HA scalable architecture diagrams (just as reference). Helthchecks & Self-healing \u00b6 K8s and containers \u00b6 K8s readiness and liveness probes Distributed systems can be hard to manage. A big reason is that there are many moving parts that all need to work for the system to function. If a small part breaks, the system has to detect it, route around it, and fix it. And this all needs to be done automatically! Health checks are a simple way to let the system know if an instance of your app is working or not working. If an instance of your app is not working, then other services should not access it or send a request to it. Instead, requests should be sent to another instance of the app that is ready, or re-tried at a later time. The system should also bring your app back to a healthy state. By default, Kubernetes starts to send traffic to a pod when all the containers inside the pod start, and restarts containers when they crash. While this can be \u201cgood enough\u201d when you are starting out, you can make your deployments more robust by creating custom health checks. Fortunately, Kubernetes make this relatively straightforward, so there is no excuse not to!\u201d So aside from the monitoring and alerting that underlying infrastructure will have, application container will have their own mechanisms to determine readiness and liveness. These are features that our scheduler of choice Kubernetes natively allows, to read more click here .","title":"High Availability"},{"location":"how-it-works/reliability/high-availability/#high-availability-helthchecks","text":"","title":"High Availability &amp; Helthchecks"},{"location":"how-it-works/reliability/high-availability/#recovery-from-failures","text":"Automatic recovery from failure It keeps an AWS environment reliable. Using logs and metrics from CloudWatch, designing a system where the failures themselves trigger recovery is the way to move forward. Figure: AWS HA architecture diagrams (just as reference).","title":"Recovery from Failures"},{"location":"how-it-works/reliability/high-availability/#recovery-procedures","text":"Test recovery procedures The risks faced by cloud environment and systems, the points of failure for systems and ecosystems, as well as details about the most probable attacks are known and can be simulated. Testing recovery procedures are something that can be done using these insights. Real points of failure are exploited and the way the environment reacts to the emergency shows just how reliable the system it. Figure: AWS HA architecture diagrams (just as reference).","title":"Recovery Procedures"},{"location":"how-it-works/reliability/high-availability/#scalability-and-availability","text":"Scale horizontally to increase aggregate system availability The cloud environment needs to have multiple redundancies and additional modules as added security measures. Of course, multiple redundancies require good management and maintenance for them to remain active through the environment\u2019s lifecycle. Figure: AWS HA scalable architecture diagrams (just as reference).","title":"Scalability and Availability"},{"location":"how-it-works/reliability/high-availability/#helthchecks-self-healing","text":"","title":"Helthchecks &amp; Self-healing"},{"location":"how-it-works/reliability/high-availability/#k8s-and-containers","text":"K8s readiness and liveness probes Distributed systems can be hard to manage. A big reason is that there are many moving parts that all need to work for the system to function. If a small part breaks, the system has to detect it, route around it, and fix it. And this all needs to be done automatically! Health checks are a simple way to let the system know if an instance of your app is working or not working. If an instance of your app is not working, then other services should not access it or send a request to it. Instead, requests should be sent to another instance of the app that is ready, or re-tried at a later time. The system should also bring your app back to a healthy state. By default, Kubernetes starts to send traffic to a pod when all the containers inside the pod start, and restarts containers when they crash. While this can be \u201cgood enough\u201d when you are starting out, you can make your deployments more robust by creating custom health checks. Fortunately, Kubernetes make this relatively straightforward, so there is no excuse not to!\u201d So aside from the monitoring and alerting that underlying infrastructure will have, application container will have their own mechanisms to determine readiness and liveness. These are features that our scheduler of choice Kubernetes natively allows, to read more click here .","title":"K8s and containers"},{"location":"how-it-works/secrets/secrets/","text":"Secret and password mgmt tools \u00b6 Overview \u00b6 Ensure scalability, availability and persistence, as well as secure, hierarchical storage to manage configuration and secret data for: Secret Managers AWS KMS AWS SSM Parameter Store Ansible Vault Hashicorp Vault Strengths Improve the level of security by validating separation of environment variables and code secrets. Control and audit granular access in detail Store secure chain and configuration data in hierarchies and track versions. Configure integration with AWS KMS, Amazon SNS, Amazon CloudWatch, and AWS CloudTrail to notify, monitor, and audit functionality. Read more \u00b6 Related articles A Comparison of Secrets Managers for AWS Clean Up Your Secrets & Credential Management","title":"Secrets"},{"location":"how-it-works/secrets/secrets/#secret-and-password-mgmt-tools","text":"","title":"Secret and password mgmt tools"},{"location":"how-it-works/secrets/secrets/#overview","text":"Ensure scalability, availability and persistence, as well as secure, hierarchical storage to manage configuration and secret data for: Secret Managers AWS KMS AWS SSM Parameter Store Ansible Vault Hashicorp Vault Strengths Improve the level of security by validating separation of environment variables and code secrets. Control and audit granular access in detail Store secure chain and configuration data in hierarchies and track versions. Configure integration with AWS KMS, Amazon SNS, Amazon CloudWatch, and AWS CloudTrail to notify, monitor, and audit functionality.","title":"Overview"},{"location":"how-it-works/secrets/secrets/#read-more","text":"Related articles A Comparison of Secrets Managers for AWS Clean Up Your Secrets & Credential Management","title":"Read more"},{"location":"how-it-works/security/services/","text":"AWS Security & Compliance Services \u00b6 Security Directives There will not be any instance port or service port open to general access, unless justified by business reasons, and we\u2019ll take alternative means of security to mitigate any possible risk. Every account will have a set of active services that will allow for administrative users (SecOps) to audit all actions and track potentially dangerous behavior. All services will be enabled via IaC (Terraform or SDK and tracked in the proper git repo). AWS Managed Security Services AWS IAM Access Analyzer: Generates comprehensive findings that identify resources policies for public or cross-account accessibility, monitors and helps you refine permissions. Provides the highest levels of security assurance. AWS Config: Tracks changes made to AWS resources over time, making possible to return to a previous state. Monitors and records your AWS resource configurations and allows you to automate the evaluation of recorded configurations against desired compliance rule set. Adds accountability factor. AWS Cloudtrail: Stores logs over all calls made to AWS APIs, coming from web console, command line or any other. Allowing us to monitor it via CW Dashboards and notifications. AWS VPC Flow Logs: Enables us to examine individual Network Interfaces logs, to address network issues and also monitor suspicious behavior. AWS Web Application Firewall: Optional but if not used, it is recommended that a similar service is used, such as Cloudflare. When paired to an Application Load Balancer or Cloudfront distribution, it checks incoming requests to detect and block OWAPS Top10 attacks, such as SQL injection, XSS and others. AWS Inspector: Is an automated security assessment service that helps improve the security and compliance of infrastructure and applications deployed on AWS. AWS Guard Duty: Is a managed threat detection service that continuously monitors for malicious or unauthorized behavior to help you protect your AWS accounts and workloads. Detects unusual API calls or potentially unauthorized deployments (possible account compromise) and potentially compromised instances or reconnaissance by attackers. AWS Security Logs Other access logs from client-facing resources will be stored in the Security account.","title":"Services"},{"location":"how-it-works/security/services/#aws-security-compliance-services","text":"Security Directives There will not be any instance port or service port open to general access, unless justified by business reasons, and we\u2019ll take alternative means of security to mitigate any possible risk. Every account will have a set of active services that will allow for administrative users (SecOps) to audit all actions and track potentially dangerous behavior. All services will be enabled via IaC (Terraform or SDK and tracked in the proper git repo). AWS Managed Security Services AWS IAM Access Analyzer: Generates comprehensive findings that identify resources policies for public or cross-account accessibility, monitors and helps you refine permissions. Provides the highest levels of security assurance. AWS Config: Tracks changes made to AWS resources over time, making possible to return to a previous state. Monitors and records your AWS resource configurations and allows you to automate the evaluation of recorded configurations against desired compliance rule set. Adds accountability factor. AWS Cloudtrail: Stores logs over all calls made to AWS APIs, coming from web console, command line or any other. Allowing us to monitor it via CW Dashboards and notifications. AWS VPC Flow Logs: Enables us to examine individual Network Interfaces logs, to address network issues and also monitor suspicious behavior. AWS Web Application Firewall: Optional but if not used, it is recommended that a similar service is used, such as Cloudflare. When paired to an Application Load Balancer or Cloudfront distribution, it checks incoming requests to detect and block OWAPS Top10 attacks, such as SQL injection, XSS and others. AWS Inspector: Is an automated security assessment service that helps improve the security and compliance of infrastructure and applications deployed on AWS. AWS Guard Duty: Is a managed threat detection service that continuously monitors for malicious or unauthorized behavior to help you protect your AWS accounts and workloads. Detects unusual API calls or potentially unauthorized deployments (possible account compromise) and potentially compromised instances or reconnaissance by attackers. AWS Security Logs Other access logs from client-facing resources will be stored in the Security account.","title":"AWS Security &amp; Compliance Services"},{"location":"how-it-works/security/vpn/","text":"VPN Server \u00b6 To securely and scalable privately access AWS Cross Organization resources we\u2019ll implement Pritunl VPN Server \u00b6 Security Directives Private HTTP endpoints for Applications (FrontEnd + APIs), SSH, monitoring & logging (UI / Dashboards) among others. Eg: Jenkins, DroneCI, EFK, Prometheus, Spinnaker, Grafana. K8s API via kubectl private endpoint eg: avoiding emergency K8s API vulnerability patching. Limit exposure: Limit the exposure of the workload to the internet and internal networks by only allowing minimum required access -> Avoiding exposure for Dev/QA/Stg http endpoints The Pritunl OpenVPN Linux instance is hardened and only runs this VPN solution. All other ports/access is restricted. Each VPN user can be required to use MFA to connect via VPN (as well as strong passwords). This combination makes almost impossible for an outsider to gain access via VPN. Centralized access and audit logs. Read More \u00b6 Pritunl - Open Source Enterprise Distributed OpenVPN, IPsec and WireGuard Server Specifications","title":"VPN"},{"location":"how-it-works/security/vpn/#vpn-server","text":"","title":"VPN Server"},{"location":"how-it-works/security/vpn/#to-securely-and-scalable-privately-access-aws-cross-organization-resources-well-implement-pritunl-vpn-server","text":"Security Directives Private HTTP endpoints for Applications (FrontEnd + APIs), SSH, monitoring & logging (UI / Dashboards) among others. Eg: Jenkins, DroneCI, EFK, Prometheus, Spinnaker, Grafana. K8s API via kubectl private endpoint eg: avoiding emergency K8s API vulnerability patching. Limit exposure: Limit the exposure of the workload to the internet and internal networks by only allowing minimum required access -> Avoiding exposure for Dev/QA/Stg http endpoints The Pritunl OpenVPN Linux instance is hardened and only runs this VPN solution. All other ports/access is restricted. Each VPN user can be required to use MFA to connect via VPN (as well as strong passwords). This combination makes almost impossible for an outsider to gain access via VPN. Centralized access and audit logs.","title":"To securely and scalable privately access AWS Cross Organization resources we\u2019ll implement Pritunl VPN Server"},{"location":"how-it-works/security/vpn/#read-more","text":"Pritunl - Open Source Enterprise Distributed OpenVPN, IPsec and WireGuard Server Specifications","title":"Read More"},{"location":"how-it-works/storage/storage/","text":"Storage \u00b6 We will review all S3 buckets in the existing account to determine if it\u2019s necessary to copy over to the new account, evaluate existing bucket policy and tightening permissions to be absolutely minimum required for users and applications. As for EBS volumes, our recommendation is to create all encrypted by default. Overhead created by this process is negligible. S3 buckets \u00b6 Tech specs Encryption: Yes (by default) Object versioning: TBD per bucket Access logs enabled: TBD per bucket MFA delete: Yes on critical buckets Replication to another region: TBD per bucket EBS Volumes \u00b6 Tech specs Backups: Periodic EBS snapshots with retention policy Encryption: Yes (by default) Type: SSD (gp2) by default, Throughput Optimized HDD (st1) for some database workloads, if needed.","title":"Storage"},{"location":"how-it-works/storage/storage/#storage","text":"We will review all S3 buckets in the existing account to determine if it\u2019s necessary to copy over to the new account, evaluate existing bucket policy and tightening permissions to be absolutely minimum required for users and applications. As for EBS volumes, our recommendation is to create all encrypted by default. Overhead created by this process is negligible.","title":"Storage"},{"location":"how-it-works/storage/storage/#s3-buckets","text":"Tech specs Encryption: Yes (by default) Object versioning: TBD per bucket Access logs enabled: TBD per bucket MFA delete: Yes on critical buckets Replication to another region: TBD per bucket","title":"S3 buckets"},{"location":"how-it-works/storage/storage/#ebs-volumes","text":"Tech specs Backups: Periodic EBS snapshots with retention policy Encryption: Yes (by default) Type: SSD (gp2) by default, Throughput Optimized HDD (st1) for some database workloads, if needed.","title":"EBS Volumes"},{"location":"how-it-works/tools/tools/","text":"Infrastructure Instances Tools \u00b6 Overview \u00b6 Apart from the EC2 instances that are part of Kubernetes, there are going to be other instances running tools for monitoring, logging centralization, builds/tests, deployment, among others. that are to be defined at this point. Some of them can be replaced by managed services, like: CircleCI, Snyk, etc, and this can have cons and pros that will need to be considered at the time of implementation. Any OS that is provisioned will be completely reproducible as code, in the event of migration to another vendor. Other settings for all EC2 instances Ubuntu 18.04 based (Latest AMI) EBS volumes encrypted: Yes EBS volume type: gp2 (SSD) Termination protection: Yes Infrastructure EC2 instances VPN Server Pritunl (https://vpn.domain.com) Monitoring & Alerting Prometheus (https://prometheus.domain.com) Grafana (https://grafana.domain.com) Centralized Logs Elasticsearch + Kibana (https://kibana.domain.com) CI/CD Jenkins (https://jenkins.domain.com) Spinnaker (https://spinnaker.domain.com) Droneci (https://droneci.domain.com) Webhook (https://webhook.domain.com) Secret Mgmt Hashicorp Vault (https://vault.domain.com)","title":"Tools"},{"location":"how-it-works/tools/tools/#infrastructure-instances-tools","text":"","title":"Infrastructure Instances Tools"},{"location":"how-it-works/tools/tools/#overview","text":"Apart from the EC2 instances that are part of Kubernetes, there are going to be other instances running tools for monitoring, logging centralization, builds/tests, deployment, among others. that are to be defined at this point. Some of them can be replaced by managed services, like: CircleCI, Snyk, etc, and this can have cons and pros that will need to be considered at the time of implementation. Any OS that is provisioned will be completely reproducible as code, in the event of migration to another vendor. Other settings for all EC2 instances Ubuntu 18.04 based (Latest AMI) EBS volumes encrypted: Yes EBS volume type: gp2 (SSD) Termination protection: Yes Infrastructure EC2 instances VPN Server Pritunl (https://vpn.domain.com) Monitoring & Alerting Prometheus (https://prometheus.domain.com) Grafana (https://grafana.domain.com) Centralized Logs Elasticsearch + Kibana (https://kibana.domain.com) CI/CD Jenkins (https://jenkins.domain.com) Spinnaker (https://spinnaker.domain.com) Droneci (https://droneci.domain.com) Webhook (https://webhook.domain.com) Secret Mgmt Hashicorp Vault (https://vault.domain.com)","title":"Overview"},{"location":"user-guide/","text":"Overview \u00b6 TODO Configurations \u00b6 le-tf-infra-aws le-ansible-infra le-helm-infra Workflow \u00b6 le-tf-infra-aws le-ansible-infra le-helm-infra","title":"Basic usage"},{"location":"user-guide/#overview","text":"TODO","title":"Overview"},{"location":"user-guide/#configurations","text":"le-tf-infra-aws le-ansible-infra le-helm-infra","title":"Configurations"},{"location":"user-guide/#workflow","text":"le-tf-infra-aws le-ansible-infra le-helm-infra","title":"Workflow"},{"location":"user-guide/base-configuration/overview/","text":"Overview \u00b6 Pre-requisites \u00b6 Local env pre-requeried packages GNU Make >= 4.1 (check via make --version ) Docker engine >= 19.03.12 (check via docker --version ) Python >= 3.8 (check via python3 --version || python3.8 --version ) jq >= jq-1.5-1-a5b5cbe (check via jq --version ) aws-cli >= 1.16.265 (check via aws --version ) Configurations \u00b6 Specific configuration per component could be found in the immediately following entries config | le-tf-infra-aws config | le-ansible-infra config | le-helm-infra","title":"Overview"},{"location":"user-guide/base-configuration/overview/#overview","text":"","title":"Overview"},{"location":"user-guide/base-configuration/overview/#pre-requisites","text":"Local env pre-requeried packages GNU Make >= 4.1 (check via make --version ) Docker engine >= 19.03.12 (check via docker --version ) Python >= 3.8 (check via python3 --version || python3.8 --version ) jq >= jq-1.5-1-a5b5cbe (check via jq --version ) aws-cli >= 1.16.265 (check via aws --version )","title":"Pre-requisites"},{"location":"user-guide/base-configuration/overview/#configurations","text":"Specific configuration per component could be found in the immediately following entries config | le-tf-infra-aws config | le-ansible-infra config | le-helm-infra","title":"Configurations"},{"location":"user-guide/base-configuration/repo-le-ansible-infra/","text":"Configuration: Ansible Playbooks \u00b6 Overview \u00b6 This repository contains all the Ansible Playbooks configuration files used to create Binbash Leverage Reference AWS Cloud Solutions Architecture. Ansible Playbook Documentation \u00b6 Check out the README.md under contained under each repo Playbooks Documentation User Management & Security sec-users VPN Server vpn-pritunl Monitoring & Alerting prometheus-grfana Centralized Logs eskibana CI/CD jenkins spinnaker droneci webhook Secret Mgmt hashicorp-vault","title":"Ansible Infra"},{"location":"user-guide/base-configuration/repo-le-ansible-infra/#configuration-ansible-playbooks","text":"","title":"Configuration: Ansible Playbooks"},{"location":"user-guide/base-configuration/repo-le-ansible-infra/#overview","text":"This repository contains all the Ansible Playbooks configuration files used to create Binbash Leverage Reference AWS Cloud Solutions Architecture.","title":"Overview"},{"location":"user-guide/base-configuration/repo-le-ansible-infra/#ansible-playbook-documentation","text":"Check out the README.md under contained under each repo Playbooks Documentation User Management & Security sec-users VPN Server vpn-pritunl Monitoring & Alerting prometheus-grfana Centralized Logs eskibana CI/CD jenkins spinnaker droneci webhook Secret Mgmt hashicorp-vault","title":"Ansible Playbook Documentation"},{"location":"user-guide/base-configuration/repo-le-helm-infra/","text":"Configuration: le-helm-infra \u00b6 Overview \u00b6 This repository holds infrastructure that we deploy to our clusters via Helm + Helmsman. Files and Directories \u00b6 Environment directories contain the Helmsman's desired state file that define what charts are deployed to each environment . \u251c\u2500\u2500 @bin = > Binaries, scripts and helpers used across the repository ... \u251c\u2500\u2500 devstg \u2502 \u251c\u2500\u2500 aws-eks = > Components of the 'devstg' EKS cluster \u2502 \u2514\u2500\u2500 aws-kops = > Components of the 'devstg' Kops cluster \u251c\u2500\u2500 @doc \u2502 \u2514\u2500\u2500 figures \u251c\u2500\u2500 LICENSE.md \u251c\u2500\u2500 localdev = > Components of the 'local' Kind cluster \u2502 \u251c\u2500\u2500 helmsman.yaml = > The desired state file used by Helmsman to install/remove cluster components \u2502 \u251c\u2500\u2500 fluentd-daemonset = > Custom values for the fluentd-daemonset chart ( equivalent for other components ) ... \u2502 \u251c\u2500\u2500 Makefile = > A helper to run typical commands ... \u2514\u2500\u2500 README.md Requirements \u00b6 Docker >= v18.09 Helm and Helmsman are provided via docker image","title":"Helm Infra"},{"location":"user-guide/base-configuration/repo-le-helm-infra/#configuration-le-helm-infra","text":"","title":"Configuration: le-helm-infra"},{"location":"user-guide/base-configuration/repo-le-helm-infra/#overview","text":"This repository holds infrastructure that we deploy to our clusters via Helm + Helmsman.","title":"Overview"},{"location":"user-guide/base-configuration/repo-le-helm-infra/#files-and-directories","text":"Environment directories contain the Helmsman's desired state file that define what charts are deployed to each environment . \u251c\u2500\u2500 @bin = > Binaries, scripts and helpers used across the repository ... \u251c\u2500\u2500 devstg \u2502 \u251c\u2500\u2500 aws-eks = > Components of the 'devstg' EKS cluster \u2502 \u2514\u2500\u2500 aws-kops = > Components of the 'devstg' Kops cluster \u251c\u2500\u2500 @doc \u2502 \u2514\u2500\u2500 figures \u251c\u2500\u2500 LICENSE.md \u251c\u2500\u2500 localdev = > Components of the 'local' Kind cluster \u2502 \u251c\u2500\u2500 helmsman.yaml = > The desired state file used by Helmsman to install/remove cluster components \u2502 \u251c\u2500\u2500 fluentd-daemonset = > Custom values for the fluentd-daemonset chart ( equivalent for other components ) ... \u2502 \u251c\u2500\u2500 Makefile = > A helper to run typical commands ... \u2514\u2500\u2500 README.md","title":"Files and Directories"},{"location":"user-guide/base-configuration/repo-le-helm-infra/#requirements","text":"Docker >= v18.09 Helm and Helmsman are provided via docker image","title":"Requirements"},{"location":"user-guide/base-configuration/repo-le-tf-infra-aws/","text":"Files/Folders Organization \u00b6 The following block provides a brief explanation of the chosen files/folders layout: + apps-devstg/ (resources for Apps dev & stg account) ... + apps-prd/ (resources for Apps Prod account) ... + root-org/ (resources for the root-org account) ... + security/ (resources for the security + users account) ... + shared/ (resources for the shared account) ... Configuration files are organized by environments (e.g. dev, stg) and service type (identities, sec, network, etc) to keep any changes made to them separate. Within each of those folders you should find the Terraform files that are used to define all the resources that belong to such environment. figure 1: AWS Organization Architecture Diagram (just as reference). Under every account folder you will see a service layer structure similar to the following: . \u251c\u2500\u2500 apps-devstg \u2502 \u251c\u2500\u2500 10_databases_mysql -- \u2502 \u251c\u2500\u2500 10_databases_pgsql -- \u2502 \u251c\u2500\u2500 1_tf-backend \u2502 \u251c\u2500\u2500 2_identities \u2502 \u251c\u2500\u2500 3_network \u2502 \u251c\u2500\u2500 4_security \u2502 \u251c\u2500\u2500 4_security_compliance -- \u2502 \u251c\u2500\u2500 5_dns \u2502 \u251c\u2500\u2500 6_notifications \u2502 \u251c\u2500\u2500 7_cloud-nuke \u2502 \u251c\u2500\u2500 8_k8s_eks -- \u2502 \u251c\u2500\u2500 8_k8s_kops -- \u2502 \u251c\u2500\u2500 9_backups -- \u2502 \u251c\u2500\u2500 9_storage -- \u2502 \u2514\u2500\u2500 config \u251c\u2500\u2500 apps-prd \u2502 \u251c\u2500\u2500 1_tf-backend -- \u2502 \u251c\u2500\u2500 2_identities -- \u2502 \u251c\u2500\u2500 3_network -- \u2502 \u251c\u2500\u2500 4_security -- \u2502 \u251c\u2500\u2500 4_security_compliance -- \u2502 \u251c\u2500\u2500 5_dns -- \u2502 \u251c\u2500\u2500 6_notifications -- \u2502 \u251c\u2500\u2500 9_backups -- \u2502 \u2514\u2500\u2500 config \u251c\u2500\u2500 root-org \u2502 \u251c\u2500\u2500 1_tf-backend \u2502 \u251c\u2500\u2500 2_identities \u2502 \u251c\u2500\u2500 3_organizations \u2502 \u251c\u2500\u2500 4_security \u2502 \u251c\u2500\u2500 4_security_compliance -- \u2502 \u251c\u2500\u2500 5_cost-mgmt \u2502 \u251c\u2500\u2500 6_notifications \u2502 \u2514\u2500\u2500 config \u251c\u2500\u2500 security \u2502 \u251c\u2500\u2500 1_tf-backend \u2502 \u251c\u2500\u2500 2_identities \u2502 \u251c\u2500\u2500 4_security \u2502 \u251c\u2500\u2500 4_security_compliance -- \u2502 \u251c\u2500\u2500 6_notifications \u2502 \u2514\u2500\u2500 config \u2514\u2500\u2500 shared \u251c\u2500\u2500 1_tf-backend \u251c\u2500\u2500 2_identities \u251c\u2500\u2500 3_network \u251c\u2500\u2500 4_security \u251c\u2500\u2500 4_security_compliance -- \u251c\u2500\u2500 5_dns \u251c\u2500\u2500 6_notifications \u251c\u2500\u2500 7_vpn-server \u251c\u2500\u2500 8_container_registry \u2514\u2500\u2500 config NOTE: As a convention folders with the -- suffix reflect that the resources are not currently created in AWS, basically they've been destroyed or not yet exist. Such separation is meant to avoid situations in which a single folder contains a lot of resources. That is important to avoid because at some point, running terraform plan or apply stats taking too long and that becomes a problem. This organization also provides a layout that is easier to navigate and discover. You simply start with the accounts at the top level and then you get to explore the resource categories within each account. Pre-requisites \u00b6 Makefile \u00b6 We rely on Makefiles as a wrapper to run terraform commands that consistently use the same config files. You are encouraged to inspect those Makefiles to understand what's going on. Terraform \u00b6 Install terraform >= v0.12.20 Run terraform version to check NOTE: Most Makefiles already grant the recs via Dockerized cmds (https://hub.docker.com/repository/docker/binbash/terraform-resources) Remote State \u00b6 In the tf-backend folder you should find all setup scripts or configuration files that need to be run before you can get to work with anything else. IMPORTANT: THIS IS ONLY NEEDED IF THE BACKEND WAS NOT CREATED YET. IF THE BACKEND ALREADY EXISTS YOU JUST USE IT. Configuration \u00b6 Config files can be found in under each 'config' folder. File backend.config contains TF variables that are mainly used to configure TF backend but since profile and region are defined there, we also use them to inject those values into other TF commands. File base.config contains TF variables that we inject to TF commands such as plan or apply and which cannot be stored in backend.config due to TF restrictions. File extra.config similar to base.config but variables declared here are not used by all sub-directories. AWS Profile \u00b6 File backend.config will inject the profile name that TF will use to make changes on AWS. Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account. File @doc/binbash-aws-org-config will be considered to be appended to your .aws/config file note that .aws/config will depend on the IAM profiles declared at your .aws/credentials Read the following page to understand how to set up a profile to assume a role => https://docs.aws.amazon.com/cli/latest/userguide/cli-roles.html","title":"Terraform Infra"},{"location":"user-guide/base-configuration/repo-le-tf-infra-aws/#filesfolders-organization","text":"The following block provides a brief explanation of the chosen files/folders layout: + apps-devstg/ (resources for Apps dev & stg account) ... + apps-prd/ (resources for Apps Prod account) ... + root-org/ (resources for the root-org account) ... + security/ (resources for the security + users account) ... + shared/ (resources for the shared account) ... Configuration files are organized by environments (e.g. dev, stg) and service type (identities, sec, network, etc) to keep any changes made to them separate. Within each of those folders you should find the Terraform files that are used to define all the resources that belong to such environment. figure 1: AWS Organization Architecture Diagram (just as reference). Under every account folder you will see a service layer structure similar to the following: . \u251c\u2500\u2500 apps-devstg \u2502 \u251c\u2500\u2500 10_databases_mysql -- \u2502 \u251c\u2500\u2500 10_databases_pgsql -- \u2502 \u251c\u2500\u2500 1_tf-backend \u2502 \u251c\u2500\u2500 2_identities \u2502 \u251c\u2500\u2500 3_network \u2502 \u251c\u2500\u2500 4_security \u2502 \u251c\u2500\u2500 4_security_compliance -- \u2502 \u251c\u2500\u2500 5_dns \u2502 \u251c\u2500\u2500 6_notifications \u2502 \u251c\u2500\u2500 7_cloud-nuke \u2502 \u251c\u2500\u2500 8_k8s_eks -- \u2502 \u251c\u2500\u2500 8_k8s_kops -- \u2502 \u251c\u2500\u2500 9_backups -- \u2502 \u251c\u2500\u2500 9_storage -- \u2502 \u2514\u2500\u2500 config \u251c\u2500\u2500 apps-prd \u2502 \u251c\u2500\u2500 1_tf-backend -- \u2502 \u251c\u2500\u2500 2_identities -- \u2502 \u251c\u2500\u2500 3_network -- \u2502 \u251c\u2500\u2500 4_security -- \u2502 \u251c\u2500\u2500 4_security_compliance -- \u2502 \u251c\u2500\u2500 5_dns -- \u2502 \u251c\u2500\u2500 6_notifications -- \u2502 \u251c\u2500\u2500 9_backups -- \u2502 \u2514\u2500\u2500 config \u251c\u2500\u2500 root-org \u2502 \u251c\u2500\u2500 1_tf-backend \u2502 \u251c\u2500\u2500 2_identities \u2502 \u251c\u2500\u2500 3_organizations \u2502 \u251c\u2500\u2500 4_security \u2502 \u251c\u2500\u2500 4_security_compliance -- \u2502 \u251c\u2500\u2500 5_cost-mgmt \u2502 \u251c\u2500\u2500 6_notifications \u2502 \u2514\u2500\u2500 config \u251c\u2500\u2500 security \u2502 \u251c\u2500\u2500 1_tf-backend \u2502 \u251c\u2500\u2500 2_identities \u2502 \u251c\u2500\u2500 4_security \u2502 \u251c\u2500\u2500 4_security_compliance -- \u2502 \u251c\u2500\u2500 6_notifications \u2502 \u2514\u2500\u2500 config \u2514\u2500\u2500 shared \u251c\u2500\u2500 1_tf-backend \u251c\u2500\u2500 2_identities \u251c\u2500\u2500 3_network \u251c\u2500\u2500 4_security \u251c\u2500\u2500 4_security_compliance -- \u251c\u2500\u2500 5_dns \u251c\u2500\u2500 6_notifications \u251c\u2500\u2500 7_vpn-server \u251c\u2500\u2500 8_container_registry \u2514\u2500\u2500 config NOTE: As a convention folders with the -- suffix reflect that the resources are not currently created in AWS, basically they've been destroyed or not yet exist. Such separation is meant to avoid situations in which a single folder contains a lot of resources. That is important to avoid because at some point, running terraform plan or apply stats taking too long and that becomes a problem. This organization also provides a layout that is easier to navigate and discover. You simply start with the accounts at the top level and then you get to explore the resource categories within each account.","title":"Files/Folders Organization"},{"location":"user-guide/base-configuration/repo-le-tf-infra-aws/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"user-guide/base-configuration/repo-le-tf-infra-aws/#makefile","text":"We rely on Makefiles as a wrapper to run terraform commands that consistently use the same config files. You are encouraged to inspect those Makefiles to understand what's going on.","title":"Makefile"},{"location":"user-guide/base-configuration/repo-le-tf-infra-aws/#terraform","text":"Install terraform >= v0.12.20 Run terraform version to check NOTE: Most Makefiles already grant the recs via Dockerized cmds (https://hub.docker.com/repository/docker/binbash/terraform-resources)","title":"Terraform"},{"location":"user-guide/base-configuration/repo-le-tf-infra-aws/#remote-state","text":"In the tf-backend folder you should find all setup scripts or configuration files that need to be run before you can get to work with anything else. IMPORTANT: THIS IS ONLY NEEDED IF THE BACKEND WAS NOT CREATED YET. IF THE BACKEND ALREADY EXISTS YOU JUST USE IT.","title":"Remote State"},{"location":"user-guide/base-configuration/repo-le-tf-infra-aws/#configuration","text":"Config files can be found in under each 'config' folder. File backend.config contains TF variables that are mainly used to configure TF backend but since profile and region are defined there, we also use them to inject those values into other TF commands. File base.config contains TF variables that we inject to TF commands such as plan or apply and which cannot be stored in backend.config due to TF restrictions. File extra.config similar to base.config but variables declared here are not used by all sub-directories.","title":"Configuration"},{"location":"user-guide/base-configuration/repo-le-tf-infra-aws/#aws-profile","text":"File backend.config will inject the profile name that TF will use to make changes on AWS. Such profile is usually one that relies on another profile to assume a role to get access to each corresponding account. File @doc/binbash-aws-org-config will be considered to be appended to your .aws/config file note that .aws/config will depend on the IAM profiles declared at your .aws/credentials Read the following page to understand how to set up a profile to assume a role => https://docs.aws.amazon.com/cli/latest/userguide/cli-roles.html","title":"AWS Profile"},{"location":"user-guide/base-workflow/repo-le-ansible-infra/","text":"Workflow \u00b6 Makefile \u00b6 We rely on Makefiles as a wrapper to run terraform commands that consistently use the same config files. You are encouraged to inspect those Makefiles to understand what's going on. Ansible \u00b6 Get into the folder that you need to work with (e.g. ansible-playbook-vpn-pritunl ) Run make init to get all the necessary Ansible roles based on each requirements.yml Run init-ansible-py (if necessary) Make whatever changes you need to make as stated in each Playbook Documentation (check Documentation section above) Run make check if you only mean to preview those changes Run make apply if you want to apply those changes","title":"Ansible Infra"},{"location":"user-guide/base-workflow/repo-le-ansible-infra/#workflow","text":"","title":"Workflow"},{"location":"user-guide/base-workflow/repo-le-ansible-infra/#makefile","text":"We rely on Makefiles as a wrapper to run terraform commands that consistently use the same config files. You are encouraged to inspect those Makefiles to understand what's going on.","title":"Makefile"},{"location":"user-guide/base-workflow/repo-le-ansible-infra/#ansible","text":"Get into the folder that you need to work with (e.g. ansible-playbook-vpn-pritunl ) Run make init to get all the necessary Ansible roles based on each requirements.yml Run init-ansible-py (if necessary) Make whatever changes you need to make as stated in each Playbook Documentation (check Documentation section above) Run make check if you only mean to preview those changes Run make apply if you want to apply those changes","title":"Ansible"},{"location":"user-guide/base-workflow/repo-le-helm-infra/","text":"Typical Workflow \u00b6 Add or remove apps to an environment \u00b6 Go to the directory of the environment you need to work with (shared, devstg, prd, ...) Edit helmsman.yaml to add/remove any charts you need Run helmsman in plan mode to preview your changes: make plan Review the plan to make sure helmsman will apply the changes you expect Run helmsman in apply mode: make apply","title":"Helm Infra"},{"location":"user-guide/base-workflow/repo-le-helm-infra/#typical-workflow","text":"","title":"Typical Workflow"},{"location":"user-guide/base-workflow/repo-le-helm-infra/#add-or-remove-apps-to-an-environment","text":"Go to the directory of the environment you need to work with (shared, devstg, prd, ...) Edit helmsman.yaml to add/remove any charts you need Run helmsman in plan mode to preview your changes: make plan Review the plan to make sure helmsman will apply the changes you expect Run helmsman in apply mode: make apply","title":"Add or remove apps to an environment"},{"location":"user-guide/base-workflow/repo-le-tf-infra-aws/","text":"Workflow \u00b6 Terraform Workflow Make sure you've read the 'Pre-requisites' section 1st steps Get into the folder that you need to work with (e.g. 2_identities ) Run make init Make whatever changes you need to make Run make plan if you only mean to preview those changes Run make apply if you want to review and likely apply those changes Note If desired at step #5 you could submit a PR, allowing you and the rest of the team to understand and review what changes would be made to your AWS Cloud Architecture components before executing make apply ( terraform apply ). This brings the huge benefit of treating changes with a GitOps oriented approach, basically as we should treat any other code & infrastructure change, and integrate it with the rest of our tools and practices like CI/CD, in Running in Automation \u00b6 Figure: Running terraform with AWS in automation (just as reference). Read More \u00b6 Extra resources Running Terraform in automation","title":"Terraform Infra"},{"location":"user-guide/base-workflow/repo-le-tf-infra-aws/#workflow","text":"Terraform Workflow Make sure you've read the 'Pre-requisites' section 1st steps Get into the folder that you need to work with (e.g. 2_identities ) Run make init Make whatever changes you need to make Run make plan if you only mean to preview those changes Run make apply if you want to review and likely apply those changes Note If desired at step #5 you could submit a PR, allowing you and the rest of the team to understand and review what changes would be made to your AWS Cloud Architecture components before executing make apply ( terraform apply ). This brings the huge benefit of treating changes with a GitOps oriented approach, basically as we should treat any other code & infrastructure change, and integrate it with the rest of our tools and practices like CI/CD, in","title":"Workflow"},{"location":"user-guide/base-workflow/repo-le-tf-infra-aws/#running-in-automation","text":"Figure: Running terraform with AWS in automation (just as reference).","title":"Running in Automation"},{"location":"user-guide/base-workflow/repo-le-tf-infra-aws/#read-more","text":"Extra resources Running Terraform in automation","title":"Read More"},{"location":"user-guide/cdn/cdn/","text":"","title":"CDN"},{"location":"user-guide/ci-cd/ci-cd/","text":"","title":"CI/CD"},{"location":"user-guide/compute/k8s-eks/","text":"","title":"K8s EKS"},{"location":"user-guide/compute/k8s-kops/","text":"AWS Kubernetes Kops Cluster \u00b6 Kops Pre-requisites \u00b6 Important consideration K8s clusters provisioned by Kops have a number of resources that need to be available before the cluster is created. These are Kops pre-requisites and they are defined in the 1-prerequisites directory which includes all Terraform files used to create/modify these resources. The current code has been fully tested with the AWS VPC Network Module OS pre-req packages Ref Link: https://github.com/kubernetes/kops/blob/master/docs/install.md) kops >= 1.14.0 \u2570\u2500\u25cb kops version Version 1 .15.0 ( git-9992b4055 ) kubectl >= 1.14.0 \u2570\u2500\u25cb kubectl version --client + kubectl version --client Client Version: version.Info { Major: \"1\" , Minor: \"14\" , GitVersion: \"v1.14.0\" , GitCommit: \"641856db18352033a0d96dbc99153fa3b27298e5\" , GitTreeState: \"clean\" , BuildDate: \"2019-03-25T15:53:57Z\" , GoVersion: \"go1.12.1\" , Compiler: \"gc\" , Platform: \"linux/amd64\" } terraform >= 0.12.0 \u2570\u2500\u25cb terraform version Terraform v0.12.24 NOTE1: Regarding Terraform versions please also consider https://github.com/binbashar/bb-devops-tf-aws-kops#todo NOTE2: These dependencies will me mostly covered via Makefile w/ terraform dockerized cmds (https://hub.docker.com/repository/docker/binbash/terraform-awscli) jq >= 1.5.0 \u2570\u2500\u25cb jq --version jq-1.5-1-a5b5cbe Resulting Solutions Architecture \u00b6 Figure: AWS K8s Kops architecture diagram (just as reference). Why this workflow \u00b6 The workflow follows the same approach that is used to manage other terraform resources in your AWS accounts. E.g. network, identities, and so on. So we'll use existing AWS resources to create a cluster-template.yaml containing all the resource IDs that Kops needs to create a Kubernetes cluster. Why not directly use Kops CLI to create the K8s cluster as well as the VPC and its other dependencies? While this is a valid approach, we want to manage all these building blocks independently and be able to fully customize any AWS component without having to alter our Kubernetes cluster definitions and vice-versa. This is a fully declarative coding style approach to manage your infrastructure so being able to declare the state of our cluster in YAML files fits 100% as code & GitOps based approach. Figure: Workflow diagram . Kops Cluster Management \u00b6 The 2-kops directory includes helper scripts and Terraform files in order to template our Kubernetes cluster definition. The idea is to use our Terraform outputs from 1-prerequisites to construct a cluster definition. Overview \u00b6 Cluster Management via Kops is typically carried out through the kops CLI. In this case, we use a 2-kops directory that contains a Makefile, Terraform files and other helper scripts that reinforce the workflow we use to create/update/delete the cluster. Workflow \u00b6 This workflow is a little different to the typical Terraform workflows we use. The full workflow goes as follows: Cluster: Creation & Update Modify files under 1-prerequisites Main files to update probably are locals.tf and outputs.tf Mostly before the cluster is created but could be needed afterward Modify cluster-template.yml under 2-kops folder E.g. to add or remove instance groups, upgrade k8s version, etc At 2-kops/ context run make cluster-update will follow the steps below Get Terraform outputs from 1-prerequisites Generate a Kops cluster manifest -- it uses cluster-template.yml as a template and the outputs from the point above as replacement values Update Kops state -- it uses the generated Kops cluster manifest in previous point ( cluster.yml ) Generate Kops Terraform file ( kubernetes.tf ) -- this file represents the changes that Kops needs to apply on the cloud provider. Run make plan To preview any infrastructure changes that Terraform will make. If desired we could submit a PR, allowing you and the rest of the team to understand and review what changes would be made to the Kubernetes cluster before excecuting make apply ( terraform apply ). This brings the huge benefit of treating changes to our Kubernetes clusters with a GitOps oriented approach, basically like we treat any other code & infrastructure change, and integrate it with the rest of our tools and practices like CI/CD, integration testing, replicate environments and so on. Run make apply To apply those infrastructure changes on AWS. Run make cluster-rolling-update To determine if Kops needs to trigger some changes to happen right now (dry run) These are usually changes to the EC2 instances that won't get reflected as they depend on the autoscaling Run make cluster-rolling-update-yes To actually make any changes to the cluster masters/nodes happen Cluster: Deletion To clean-up any resources created for your K8s cluster, you should run: At 2-kops folder context run make destroy This will excecute a terraform destroy of all the kubernets.tf declared AWS resources. At 2-kops folder context run cluster-destroy Will run Kops destroy cluster -- only dry run, no changes will be applied Exec cluster-destroy-yes Kops will effectively destroy all the remaining cluster resources. Finally if at 1-prerequisites exec make destroy This will remove Kops state S3 bucket + any other extra resources you've provsioned for your cluster. Tipical Workflow \u00b6 The workflow may look complicated at first but generally it boils down to these simplified steps: 1. Modify cluster-template.yml 2. Run make cluste-update 3. Run make apply 4. Run make cluster-rolling-update-yes What about persistent and stateful K8s resources? This approach will work better the more stateless your Kubernetes workloads are. Treating Kubernetes clusters as ephemeral and replaceable infrastructure requires to consider not to use persistent volumes or the drawback of difficulties when running workloads such as databases on K8s. We feel pretty confident that we can recreate our workloads by applying each of our service definitions, charts and manifests to a given Kubernetes cluster as long as we keep the persistent storage separately on AWS RDS, DynamoDB, EFS and so on. In terms of the etcd state persistency, Kops already provisions the etcd volumes (AWS EBS) independently to the master instances they get attached to. This helps to persist the etcd state after rolling update your master nodes without any user intervention. Moreover simplifying volume backups via EBS Snapshots (consider https://github.com/binbashar/terraform-aws-backup-by-tags). We also use a very valuable backup tool named Velero (formerly Heptio Ark - https://github.com/vmware-tanzu/velero) to o back up and restore our Kubernetes cluster resources and persistent volumes. TODO IMPORTANT: Kops terraform output ( kops update cluster --target terraform ) is still generated for Terraform 0.11.x (https://github.com/kubernetes/kops/issues/7052) we'll take care of the migration when tf-0.12 gets fully supported. Create a Binbash Leverage public Confluence Wiki entry detailing some more info about etcd, calico and k8s versions compatibilities","title":"K8s Kops"},{"location":"user-guide/compute/k8s-kops/#aws-kubernetes-kops-cluster","text":"","title":"AWS Kubernetes Kops Cluster"},{"location":"user-guide/compute/k8s-kops/#kops-pre-requisites","text":"Important consideration K8s clusters provisioned by Kops have a number of resources that need to be available before the cluster is created. These are Kops pre-requisites and they are defined in the 1-prerequisites directory which includes all Terraform files used to create/modify these resources. The current code has been fully tested with the AWS VPC Network Module OS pre-req packages Ref Link: https://github.com/kubernetes/kops/blob/master/docs/install.md) kops >= 1.14.0 \u2570\u2500\u25cb kops version Version 1 .15.0 ( git-9992b4055 ) kubectl >= 1.14.0 \u2570\u2500\u25cb kubectl version --client + kubectl version --client Client Version: version.Info { Major: \"1\" , Minor: \"14\" , GitVersion: \"v1.14.0\" , GitCommit: \"641856db18352033a0d96dbc99153fa3b27298e5\" , GitTreeState: \"clean\" , BuildDate: \"2019-03-25T15:53:57Z\" , GoVersion: \"go1.12.1\" , Compiler: \"gc\" , Platform: \"linux/amd64\" } terraform >= 0.12.0 \u2570\u2500\u25cb terraform version Terraform v0.12.24 NOTE1: Regarding Terraform versions please also consider https://github.com/binbashar/bb-devops-tf-aws-kops#todo NOTE2: These dependencies will me mostly covered via Makefile w/ terraform dockerized cmds (https://hub.docker.com/repository/docker/binbash/terraform-awscli) jq >= 1.5.0 \u2570\u2500\u25cb jq --version jq-1.5-1-a5b5cbe","title":"Kops Pre-requisites"},{"location":"user-guide/compute/k8s-kops/#resulting-solutions-architecture","text":"Figure: AWS K8s Kops architecture diagram (just as reference).","title":"Resulting Solutions Architecture"},{"location":"user-guide/compute/k8s-kops/#why-this-workflow","text":"The workflow follows the same approach that is used to manage other terraform resources in your AWS accounts. E.g. network, identities, and so on. So we'll use existing AWS resources to create a cluster-template.yaml containing all the resource IDs that Kops needs to create a Kubernetes cluster. Why not directly use Kops CLI to create the K8s cluster as well as the VPC and its other dependencies? While this is a valid approach, we want to manage all these building blocks independently and be able to fully customize any AWS component without having to alter our Kubernetes cluster definitions and vice-versa. This is a fully declarative coding style approach to manage your infrastructure so being able to declare the state of our cluster in YAML files fits 100% as code & GitOps based approach. Figure: Workflow diagram .","title":"Why this workflow"},{"location":"user-guide/compute/k8s-kops/#kops-cluster-management","text":"The 2-kops directory includes helper scripts and Terraform files in order to template our Kubernetes cluster definition. The idea is to use our Terraform outputs from 1-prerequisites to construct a cluster definition.","title":"Kops Cluster Management"},{"location":"user-guide/compute/k8s-kops/#overview","text":"Cluster Management via Kops is typically carried out through the kops CLI. In this case, we use a 2-kops directory that contains a Makefile, Terraform files and other helper scripts that reinforce the workflow we use to create/update/delete the cluster.","title":"Overview"},{"location":"user-guide/compute/k8s-kops/#workflow","text":"This workflow is a little different to the typical Terraform workflows we use. The full workflow goes as follows: Cluster: Creation & Update Modify files under 1-prerequisites Main files to update probably are locals.tf and outputs.tf Mostly before the cluster is created but could be needed afterward Modify cluster-template.yml under 2-kops folder E.g. to add or remove instance groups, upgrade k8s version, etc At 2-kops/ context run make cluster-update will follow the steps below Get Terraform outputs from 1-prerequisites Generate a Kops cluster manifest -- it uses cluster-template.yml as a template and the outputs from the point above as replacement values Update Kops state -- it uses the generated Kops cluster manifest in previous point ( cluster.yml ) Generate Kops Terraform file ( kubernetes.tf ) -- this file represents the changes that Kops needs to apply on the cloud provider. Run make plan To preview any infrastructure changes that Terraform will make. If desired we could submit a PR, allowing you and the rest of the team to understand and review what changes would be made to the Kubernetes cluster before excecuting make apply ( terraform apply ). This brings the huge benefit of treating changes to our Kubernetes clusters with a GitOps oriented approach, basically like we treat any other code & infrastructure change, and integrate it with the rest of our tools and practices like CI/CD, integration testing, replicate environments and so on. Run make apply To apply those infrastructure changes on AWS. Run make cluster-rolling-update To determine if Kops needs to trigger some changes to happen right now (dry run) These are usually changes to the EC2 instances that won't get reflected as they depend on the autoscaling Run make cluster-rolling-update-yes To actually make any changes to the cluster masters/nodes happen Cluster: Deletion To clean-up any resources created for your K8s cluster, you should run: At 2-kops folder context run make destroy This will excecute a terraform destroy of all the kubernets.tf declared AWS resources. At 2-kops folder context run cluster-destroy Will run Kops destroy cluster -- only dry run, no changes will be applied Exec cluster-destroy-yes Kops will effectively destroy all the remaining cluster resources. Finally if at 1-prerequisites exec make destroy This will remove Kops state S3 bucket + any other extra resources you've provsioned for your cluster.","title":"Workflow"},{"location":"user-guide/compute/k8s-kops/#tipical-workflow","text":"The workflow may look complicated at first but generally it boils down to these simplified steps: 1. Modify cluster-template.yml 2. Run make cluste-update 3. Run make apply 4. Run make cluster-rolling-update-yes What about persistent and stateful K8s resources? This approach will work better the more stateless your Kubernetes workloads are. Treating Kubernetes clusters as ephemeral and replaceable infrastructure requires to consider not to use persistent volumes or the drawback of difficulties when running workloads such as databases on K8s. We feel pretty confident that we can recreate our workloads by applying each of our service definitions, charts and manifests to a given Kubernetes cluster as long as we keep the persistent storage separately on AWS RDS, DynamoDB, EFS and so on. In terms of the etcd state persistency, Kops already provisions the etcd volumes (AWS EBS) independently to the master instances they get attached to. This helps to persist the etcd state after rolling update your master nodes without any user intervention. Moreover simplifying volume backups via EBS Snapshots (consider https://github.com/binbashar/terraform-aws-backup-by-tags). We also use a very valuable backup tool named Velero (formerly Heptio Ark - https://github.com/vmware-tanzu/velero) to o back up and restore our Kubernetes cluster resources and persistent volumes. TODO IMPORTANT: Kops terraform output ( kops update cluster --target terraform ) is still generated for Terraform 0.11.x (https://github.com/kubernetes/kops/issues/7052) we'll take care of the migration when tf-0.12 gets fully supported. Create a Binbash Leverage public Confluence Wiki entry detailing some more info about etcd, calico and k8s versions compatibilities","title":"Tipical Workflow"},{"location":"user-guide/compute/overview/","text":"","title":"Overview"},{"location":"user-guide/compute/serverless/","text":"","title":"Serverless"},{"location":"user-guide/costs/costs/","text":"","title":"Costs"},{"location":"user-guide/database/database/","text":"","title":"Databases"},{"location":"user-guide/database/mysql/","text":"","title":"MySQL"},{"location":"user-guide/database/postgres/","text":"","title":"PostgresSQL"},{"location":"user-guide/identities/credentials/","text":"AWS Credentials \u00b6 Setup \u00b6 TODO: This task will be automated via Makefile Script Resulting Example for: ~/.aws/leverage/credentials \u00b6 #================================================================# # LEVERAGE credentials # #================================================================# #------------------------------------# # AWS OrganizationAccountAccessRole # #------------------------------------# [binbash-root] aws_access_key_id = AKIXXXXXXXXXXXXXXXXXXXXX aws_secret_access_key = cKJ2XXXXXXXXXXXXXXXXXXXXXXXXXXX region = us-east-1 #------------------------------------# # AWS DevOps Role # #------------------------------------# [binbash-security] aws_access_key_id = AKXXXXXXXXXXXXXXXXXXXXXXX aws_secret_access_key = cKJ29HXXXXXXXXXXXXXXXXXXXXXXXXX region = us-east-1 Resulting Example for: ~/.aws/leverage/cofigs \u00b6 [default] output = json region = us-east-1 #================================================================# # LEVERAGE config # #================================================================# #------------------------------------# # AWS OrganizationAccountAccessRole # #------------------------------------# [profile binbash-security-oaar] output = json region = us-east-1 role_arn = arn:aws:iam::111111111111:role/OrganizationAccountAccessRole source_profile = binbash-root [profile binbash-shared-oaar] output = json region = us-east-1 role_arn = arn:aws:iam::222222222222:role/OrganizationAccountAccessRole source_profile = binbash-root [profile binbash-apps-devstg-oaar] output = json region = us-east-1 role_arn = arn:aws:iam::333333333333:role/OrganizationAccountAccessRole source_profile = binbash-root [profile binbash-apps-prd-oaar-replication] output = json region = us-east-2 role_arn = arn:aws:iam::444444444444:role/OrganizationAccountAccessRole source_profile = binbash-root [profile binbash-legacy-oaar] output = json region = us-east-1 role_arn = arn:aws:iam::555555555555:role/OrganizationAccountAccessRole source_profile = binbash-root #------------------------------------# # AWS DevOps Role # #------------------------------------# [profile binbash-security-devops] output = json region = us-east-1 role_arn = arn:aws:iam::111111111111:role/DevOps source_profile = binbash-security [profile binbash-shared-devops] output = json region = us-east-1 role_arn = arn:aws:iam::222222222222:role/DevOps source_profile = binbash-security [profile binbash-apps-devstg-devops] output = json region = us-east-1 role_arn = arn:aws:iam::333333333333:role/DevOps source_profile = binbash-security [profile binbash-apps-prd-devops] output = json region = us-east-1 role_arn = arn:aws:iam::444444444444:role/DevOps source_profile = binbash-security [profile binbash-legacy-devops] output = json region = us-east-1 role_arn = arn:aws:iam::555555555555:role/DevOps source_profile = binbash-security Switching to a AWS Organization Member Account Role \u00b6 AWS reference links Consider the following AWS official links as reference: Access AWS Organization member account Switching to a Role (Web Console) Switching to an IAM Role (AWS CLI) Environment variables to configure the AWS CLI Since our AWS Credentials files location is not as default please consider the below code before using the the awscli in your terminal $ AWS_SHARED_CREDENTIALS_FILE_VAR = \"~/.aws/bb-le/credentials\" $ export AWS_SHARED_CREDENTIALS_FILE = ${ AWS_SHARED_CREDENTIALS_FILE_VAR } $ AWS_CONFIG_FILE_VAR = \"~/.aws/bb-le/config\" $ export AWS_CONFIG_FILE = ${ AWS_CONFIG_FILE_VAR } $ aws ec2 describe-instances --profile project-apps-devstg-devops Example \u256d\u2500delivery at delivery-I7567 in ~/Binbash/repos/Leverage/ref-architecture \u2570\u2500\u2820\u2835 AWS_SHARED_CREDENTIALS_FILE_VAR = \"~/.aws/bb/credentials\" export AWS_SHARED_CREDENTIALS_FILE = ${ AWS_SHARED_CREDENTIALS_FILE_VAR } AWS_CONFIG_FILE_VAR = \"~/.aws/bb/config\" export AWS_CONFIG_FILE = ${ AWS_CONFIG_FILE_VAR } \u256d\u2500delivery at delivery-I7567 in ~/Binbash/repos/Leverage/ref-architecture \u2570\u2500\u2820\u2835 aws ec2 describe-instances --profile bb-apps-devstg-devops { \"Reservations\" : [] } Accessing a member account as the root user Read More \u00b6 AWS reference links Consider the following AWS official links as reference: Best practices for managing AWS access keys Cloud.gov | Secret key management - AWS credentials","title":"credentials"},{"location":"user-guide/identities/credentials/#aws-credentials","text":"","title":"AWS Credentials"},{"location":"user-guide/identities/credentials/#setup","text":"TODO: This task will be automated via Makefile Script","title":"Setup"},{"location":"user-guide/identities/credentials/#resulting-example-for-awsleveragecredentials","text":"#================================================================# # LEVERAGE credentials # #================================================================# #------------------------------------# # AWS OrganizationAccountAccessRole # #------------------------------------# [binbash-root] aws_access_key_id = AKIXXXXXXXXXXXXXXXXXXXXX aws_secret_access_key = cKJ2XXXXXXXXXXXXXXXXXXXXXXXXXXX region = us-east-1 #------------------------------------# # AWS DevOps Role # #------------------------------------# [binbash-security] aws_access_key_id = AKXXXXXXXXXXXXXXXXXXXXXXX aws_secret_access_key = cKJ29HXXXXXXXXXXXXXXXXXXXXXXXXX region = us-east-1","title":"Resulting Example for: ~/.aws/leverage/credentials"},{"location":"user-guide/identities/credentials/#resulting-example-for-awsleveragecofigs","text":"[default] output = json region = us-east-1 #================================================================# # LEVERAGE config # #================================================================# #------------------------------------# # AWS OrganizationAccountAccessRole # #------------------------------------# [profile binbash-security-oaar] output = json region = us-east-1 role_arn = arn:aws:iam::111111111111:role/OrganizationAccountAccessRole source_profile = binbash-root [profile binbash-shared-oaar] output = json region = us-east-1 role_arn = arn:aws:iam::222222222222:role/OrganizationAccountAccessRole source_profile = binbash-root [profile binbash-apps-devstg-oaar] output = json region = us-east-1 role_arn = arn:aws:iam::333333333333:role/OrganizationAccountAccessRole source_profile = binbash-root [profile binbash-apps-prd-oaar-replication] output = json region = us-east-2 role_arn = arn:aws:iam::444444444444:role/OrganizationAccountAccessRole source_profile = binbash-root [profile binbash-legacy-oaar] output = json region = us-east-1 role_arn = arn:aws:iam::555555555555:role/OrganizationAccountAccessRole source_profile = binbash-root #------------------------------------# # AWS DevOps Role # #------------------------------------# [profile binbash-security-devops] output = json region = us-east-1 role_arn = arn:aws:iam::111111111111:role/DevOps source_profile = binbash-security [profile binbash-shared-devops] output = json region = us-east-1 role_arn = arn:aws:iam::222222222222:role/DevOps source_profile = binbash-security [profile binbash-apps-devstg-devops] output = json region = us-east-1 role_arn = arn:aws:iam::333333333333:role/DevOps source_profile = binbash-security [profile binbash-apps-prd-devops] output = json region = us-east-1 role_arn = arn:aws:iam::444444444444:role/DevOps source_profile = binbash-security [profile binbash-legacy-devops] output = json region = us-east-1 role_arn = arn:aws:iam::555555555555:role/DevOps source_profile = binbash-security","title":"Resulting Example for: ~/.aws/leverage/cofigs"},{"location":"user-guide/identities/credentials/#switching-to-a-aws-organization-member-account-role","text":"AWS reference links Consider the following AWS official links as reference: Access AWS Organization member account Switching to a Role (Web Console) Switching to an IAM Role (AWS CLI) Environment variables to configure the AWS CLI Since our AWS Credentials files location is not as default please consider the below code before using the the awscli in your terminal $ AWS_SHARED_CREDENTIALS_FILE_VAR = \"~/.aws/bb-le/credentials\" $ export AWS_SHARED_CREDENTIALS_FILE = ${ AWS_SHARED_CREDENTIALS_FILE_VAR } $ AWS_CONFIG_FILE_VAR = \"~/.aws/bb-le/config\" $ export AWS_CONFIG_FILE = ${ AWS_CONFIG_FILE_VAR } $ aws ec2 describe-instances --profile project-apps-devstg-devops Example \u256d\u2500delivery at delivery-I7567 in ~/Binbash/repos/Leverage/ref-architecture \u2570\u2500\u2820\u2835 AWS_SHARED_CREDENTIALS_FILE_VAR = \"~/.aws/bb/credentials\" export AWS_SHARED_CREDENTIALS_FILE = ${ AWS_SHARED_CREDENTIALS_FILE_VAR } AWS_CONFIG_FILE_VAR = \"~/.aws/bb/config\" export AWS_CONFIG_FILE = ${ AWS_CONFIG_FILE_VAR } \u256d\u2500delivery at delivery-I7567 in ~/Binbash/repos/Leverage/ref-architecture \u2570\u2500\u2820\u2835 aws ec2 describe-instances --profile bb-apps-devstg-devops { \"Reservations\" : [] } Accessing a member account as the root user","title":"Switching to a AWS Organization Member Account Role"},{"location":"user-guide/identities/credentials/#read-more","text":"AWS reference links Consider the following AWS official links as reference: Best practices for managing AWS access keys Cloud.gov | Secret key management - AWS credentials","title":"Read More"},{"location":"user-guide/identities/gpg/","text":"PGP keys helper \u00b6 Why to use PGP? \u00b6 By default our Leverage Reference Architectre base-identities layer approach is to use IAM module to manage AWS IAM Users credentials with encryption to grant strong security . This module outputs commands and PGP messages which can be decrypted either using command line to get AWS Web Connsole user's password and user's secret key. Notes for keybase users If possible, always use PGP encryption to prevent Terraform from keeping unencrypted password and access secret key in state file. Keybase pre-requisites When pgp_key is specified as keybase:username , make sure that the user public key has already been uploaded to the Reference Architecture base-identities layer keys folder How to manage your GPG keys? \u00b6 Create a key pair NOTE: the user for whom this account is being created needs to do this Install gpg Run gpg --version to confirm Run gpg --gen-key and provide \"Your Name\" and \"Your Email\" as instructed -- you must also provide a passphrase Run gpg --list-keys to check that your key was generated Delete a key pair Run gpg --list-keys to check your key id Run gpg --delete-secret-keys \"Your Name\" to delete your private gpg key Run gpg --delete-key \"Your Name\" to delete your public gpg key Export your public key NOTE: the user must have created a key pair before doing this Run gpg --export \"Your Name\" | base64 Now the user can share her/his public key for creating her/his account Decrypt your encrypted password The user should copy the encrypted password from whatever media it was provided to her/him Run echo \"YOUR ENCRYPTED STRING PASSWORD HERE\" | base64 --decode > a_file_with_your_pass $ echo \"wcBMA/ujy1wF7UPcAQgASLL/x8zz7OHIP+EHU7IAZfa1A9qD9ScP5orK1M473WlXVgPrded0iHpyZRwsJRS8Xe38AHZ65O6CnywdR522MbD\\ RD6Yz+Bfc9NwO316bfSoTpyROXvMi+cfMEcihInHaCIP9YWBaI3eJ6VFdn90g9of00HYehBux7E2VitMuWo+v46W1p8/pw0b0H5qcppnUYYOjjSbjzzAuMF\\ yNB5M1K8av61bPQPQTxBH3SFaM0B4RNmUl1bHKDIcdESYyIP/PRLQ45Rs5MzGgALIxBy24qdPNjHJQR48/5QV4nzB9qeEe4eWDB4ynSEfLsXggiz8fsbajV\\ gSLNsdpqP9lYaueFdLgAeR6a+EjvqZfq0hZAgoiymsb4Qtn4A7gmeGmNeDE4td1mVfgzuTZ9zhnSbAYlXNIiM4b0MeX4HrjFkT/Aq+A/rvgBeKhszWD4Ibh\\ A4PgC+QPiJRb5kQ/mX8DheQfAHJ24iUZk1jh6AsA\" | base64 --decode > encrypted_pass Run gpg --decrypt a_file_with_your_pass (in the path you've executed 2.) to effectively decrypt your pass using your gpg key and its passphrase $ gpg --decrypt encrypted_pass You need a passphrase to unlock the secret key for user: \"Demo User (AWS org project-user acct gpg key w/ passphrase) <username.lastname@domain.com>\" 2048 -bit RSA key, ID 05ED43DC, created 2019 -03-15 ( main key ID D64DD59F ) gpg: encrypted with 2048 -bit RSA key, ID 05ED43DC, created 2019 -03-15 \"Demo User (AWS org project-user acct gpg key w/ passphrase) <username.lastname@domain.com>\" Vi0JA | c%fP*FhL } CE-D7ssp_TVGlf#% Depending on your shell version an extra % character could appear as shown below, you must disregard this character since it's not part of the Initial (one time) AWS Web Console password. If all went well, the decrypted password should be there","title":"gpg"},{"location":"user-guide/identities/gpg/#pgp-keys-helper","text":"","title":"PGP keys helper"},{"location":"user-guide/identities/gpg/#why-to-use-pgp","text":"By default our Leverage Reference Architectre base-identities layer approach is to use IAM module to manage AWS IAM Users credentials with encryption to grant strong security . This module outputs commands and PGP messages which can be decrypted either using command line to get AWS Web Connsole user's password and user's secret key. Notes for keybase users If possible, always use PGP encryption to prevent Terraform from keeping unencrypted password and access secret key in state file. Keybase pre-requisites When pgp_key is specified as keybase:username , make sure that the user public key has already been uploaded to the Reference Architecture base-identities layer keys folder","title":"Why to use PGP?"},{"location":"user-guide/identities/gpg/#how-to-manage-your-gpg-keys","text":"Create a key pair NOTE: the user for whom this account is being created needs to do this Install gpg Run gpg --version to confirm Run gpg --gen-key and provide \"Your Name\" and \"Your Email\" as instructed -- you must also provide a passphrase Run gpg --list-keys to check that your key was generated Delete a key pair Run gpg --list-keys to check your key id Run gpg --delete-secret-keys \"Your Name\" to delete your private gpg key Run gpg --delete-key \"Your Name\" to delete your public gpg key Export your public key NOTE: the user must have created a key pair before doing this Run gpg --export \"Your Name\" | base64 Now the user can share her/his public key for creating her/his account Decrypt your encrypted password The user should copy the encrypted password from whatever media it was provided to her/him Run echo \"YOUR ENCRYPTED STRING PASSWORD HERE\" | base64 --decode > a_file_with_your_pass $ echo \"wcBMA/ujy1wF7UPcAQgASLL/x8zz7OHIP+EHU7IAZfa1A9qD9ScP5orK1M473WlXVgPrded0iHpyZRwsJRS8Xe38AHZ65O6CnywdR522MbD\\ RD6Yz+Bfc9NwO316bfSoTpyROXvMi+cfMEcihInHaCIP9YWBaI3eJ6VFdn90g9of00HYehBux7E2VitMuWo+v46W1p8/pw0b0H5qcppnUYYOjjSbjzzAuMF\\ yNB5M1K8av61bPQPQTxBH3SFaM0B4RNmUl1bHKDIcdESYyIP/PRLQ45Rs5MzGgALIxBy24qdPNjHJQR48/5QV4nzB9qeEe4eWDB4ynSEfLsXggiz8fsbajV\\ gSLNsdpqP9lYaueFdLgAeR6a+EjvqZfq0hZAgoiymsb4Qtn4A7gmeGmNeDE4td1mVfgzuTZ9zhnSbAYlXNIiM4b0MeX4HrjFkT/Aq+A/rvgBeKhszWD4Ibh\\ A4PgC+QPiJRb5kQ/mX8DheQfAHJ24iUZk1jh6AsA\" | base64 --decode > encrypted_pass Run gpg --decrypt a_file_with_your_pass (in the path you've executed 2.) to effectively decrypt your pass using your gpg key and its passphrase $ gpg --decrypt encrypted_pass You need a passphrase to unlock the secret key for user: \"Demo User (AWS org project-user acct gpg key w/ passphrase) <username.lastname@domain.com>\" 2048 -bit RSA key, ID 05ED43DC, created 2019 -03-15 ( main key ID D64DD59F ) gpg: encrypted with 2048 -bit RSA key, ID 05ED43DC, created 2019 -03-15 \"Demo User (AWS org project-user acct gpg key w/ passphrase) <username.lastname@domain.com>\" Vi0JA | c%fP*FhL } CE-D7ssp_TVGlf#% Depending on your shell version an extra % character could appear as shown below, you must disregard this character since it's not part of the Initial (one time) AWS Web Console password. If all went well, the decrypted password should be there","title":"How to manage your GPG keys?"},{"location":"user-guide/identities/identities/","text":"Identity and Access Management (IAM) Layer \u00b6 How it works documentation: identities User guide \u00b6 Please follow the steps below to orchestrate your base-identities layer 1st in your project-root AWS account and afterwards in your project-security account. IAM user standard creation workflow Pre-requisite add Public PGP Key following the documentation For steps 3. and 4. consider following Terraform make workflow Update (add | remove) your IAM Users associated code and deploy security/base-identities/users.tf Consider customizing your account Alias and Password Policy Update (add | remove | edit) your IAM Groups associated code and deploy security/base-identities/groups.tf Get and share the IAM Users AWS Console user id and its OTP associated password from the make apply outputs temporally set sensitive = false to get the encrypted outputs in your prompt output. Each user will need to decrypt its AWS Console Password, you could share the associated documentation with them. Users must login to the AWS Web Console (https://project-security.signin.aws.amazon.com/console) with their decrypted password and create new pass Activate MFA for Web Console (Optional but strongly recommended) User should create his AWS ACCESS KEYS if needed User could optionally set up ~/.aws/project/credentials + ~/.aws/project/config following the immediately below AWS Credentials Setup sub-section To allow users to Access AWS Organization member account consider repeating step 3. but for the corresponding member accounts: shared/base-identities apps-devstg/base-identities app-prd/base-identities Next Steps \u00b6 Setup your AWS Credentials","title":"identities"},{"location":"user-guide/identities/identities/#identity-and-access-management-iam-layer","text":"How it works documentation: identities","title":"Identity and Access Management (IAM) Layer"},{"location":"user-guide/identities/identities/#user-guide","text":"Please follow the steps below to orchestrate your base-identities layer 1st in your project-root AWS account and afterwards in your project-security account. IAM user standard creation workflow Pre-requisite add Public PGP Key following the documentation For steps 3. and 4. consider following Terraform make workflow Update (add | remove) your IAM Users associated code and deploy security/base-identities/users.tf Consider customizing your account Alias and Password Policy Update (add | remove | edit) your IAM Groups associated code and deploy security/base-identities/groups.tf Get and share the IAM Users AWS Console user id and its OTP associated password from the make apply outputs temporally set sensitive = false to get the encrypted outputs in your prompt output. Each user will need to decrypt its AWS Console Password, you could share the associated documentation with them. Users must login to the AWS Web Console (https://project-security.signin.aws.amazon.com/console) with their decrypted password and create new pass Activate MFA for Web Console (Optional but strongly recommended) User should create his AWS ACCESS KEYS if needed User could optionally set up ~/.aws/project/credentials + ~/.aws/project/config following the immediately below AWS Credentials Setup sub-section To allow users to Access AWS Organization member account consider repeating step 3. but for the corresponding member accounts: shared/base-identities apps-devstg/base-identities app-prd/base-identities","title":"User guide"},{"location":"user-guide/identities/identities/#next-steps","text":"Setup your AWS Credentials","title":"Next Steps"},{"location":"user-guide/monitoring/apm/","text":"Application Performance Monitoring (APM) and Business Performance \u00b6 How it works documentation: APM User guide \u00b6 TODO","title":"APM"},{"location":"user-guide/monitoring/apm/#application-performance-monitoring-apm-and-business-performance","text":"How it works documentation: APM","title":"Application Performance Monitoring (APM) and Business Performance"},{"location":"user-guide/monitoring/apm/#user-guide","text":"TODO","title":"User guide"},{"location":"user-guide/monitoring/logs/","text":"","title":"Logs"},{"location":"user-guide/monitoring/metrics/","text":"","title":"Metrics"},{"location":"user-guide/monitoring/monitoring/","text":"","title":"Monitoring"},{"location":"user-guide/monitoring/tracing/","text":"","title":"Tracing"},{"location":"user-guide/network/dns/","text":"Route53 DNS hosted zones \u00b6 How it works documentation: DNS User guide \u00b6 pre-requisites Review & update configs Review & understand the workflow Steps DNS service has to be orchestrated from /shared/base-dns layer following the standard workflow To associate AWS Org Member accounts to your DNS Private Hosted Zones eg: *.aws.domain.com (previously deployed) proceed applying the corresponding layers apps-devstg/base-dns apps-prd/base-dns repeat for every other necessary AWS Org Memeber account. Migrated AWS Route53 Hosted Zones between AWS Accounts \u00b6 We'll need to setup the Route53 DNS service with an active-active config to avoid any type of service disruption and downtime. This would then allow the Name Servers of both AWS Accounts to be added to your domain provider (eg: namecheap.com ) and have for example: 4 x ns ( project-legacy Route53 Account) 4 x ns ( project-shared Route53 Account) After the records have propagated and everything looks OK we could remove the project-legacy Route53 ns from your domain provider (eg: namecheap.com ) and leave only the of project-shared ones. This official Migrating a hosted zone to a different AWS account - Amazon Route 53 article explains this procedure step by step: AWS Route53 hosted zone migration steps Create records in the new hosted zone (flex-shared) Compare records in the old and new hosted zones (flex-legacy) Update the domain registration to use name servers for the new hosted zone (NIC updated to use both flex-legacy + flex-shared) Wait for DNS resolvers to start using the new hosted zone (Optional) delete the old hosted zone (flex-legacy), remember you'll need to delete the ns delegation records from your domain registration (NIC) too.","title":"DNS"},{"location":"user-guide/network/dns/#route53-dns-hosted-zones","text":"How it works documentation: DNS","title":"Route53 DNS hosted zones"},{"location":"user-guide/network/dns/#user-guide","text":"pre-requisites Review & update configs Review & understand the workflow Steps DNS service has to be orchestrated from /shared/base-dns layer following the standard workflow To associate AWS Org Member accounts to your DNS Private Hosted Zones eg: *.aws.domain.com (previously deployed) proceed applying the corresponding layers apps-devstg/base-dns apps-prd/base-dns repeat for every other necessary AWS Org Memeber account.","title":"User guide"},{"location":"user-guide/network/dns/#migrated-aws-route53-hosted-zones-between-aws-accounts","text":"We'll need to setup the Route53 DNS service with an active-active config to avoid any type of service disruption and downtime. This would then allow the Name Servers of both AWS Accounts to be added to your domain provider (eg: namecheap.com ) and have for example: 4 x ns ( project-legacy Route53 Account) 4 x ns ( project-shared Route53 Account) After the records have propagated and everything looks OK we could remove the project-legacy Route53 ns from your domain provider (eg: namecheap.com ) and leave only the of project-shared ones. This official Migrating a hosted zone to a different AWS account - Amazon Route 53 article explains this procedure step by step: AWS Route53 hosted zone migration steps Create records in the new hosted zone (flex-shared) Compare records in the old and new hosted zones (flex-legacy) Update the domain registration to use name servers for the new hosted zone (NIC updated to use both flex-legacy + flex-shared) Wait for DNS resolvers to start using the new hosted zone (Optional) delete the old hosted zone (flex-legacy), remember you'll need to delete the ns delegation records from your domain registration (NIC) too.","title":"Migrated AWS Route53 Hosted Zones between AWS Accounts"},{"location":"user-guide/network/vpc-peering/","text":"Diagram: Network Service (cross-account VPC peering ) \u00b6 How it works \u00b6 TODO User guide \u00b6 TODO","title":"VPC Peering"},{"location":"user-guide/network/vpc-peering/#diagram-network-service-cross-account-vpc-peering","text":"","title":"Diagram: Network Service (cross-account VPC peering)"},{"location":"user-guide/network/vpc-peering/#how-it-works","text":"TODO","title":"How it works"},{"location":"user-guide/network/vpc-peering/#user-guide","text":"TODO","title":"User guide"},{"location":"user-guide/network/vpc/","text":"Network Layer \u00b6 How it works documentation: Networking User guide \u00b6 Please follow the steps below to orchestrate your base-network layer, 1st in your project-shared AWS account and afterwards in the necessary member accounts which will host network connected resources (EC2, Lambda, EKS, RDS, ALB, NLB, etc): project-apps-devstg account. project-apps-prd account. Network layer standard creation workflow Please follow Terraform make workflow for each of your accounts. We'll start by project-shared AWS Account Update (add | remove | customize) your VPC associated code before deploying this layer shared/base-network Main files network.tf locals.tf Repeat for every AWS member Account that needs its own VPC Access AWS Organization member account consider repeating step 3. but for the corresponding member accounts. Next Steps \u00b6 AWS VPC Peering","title":"VPC"},{"location":"user-guide/network/vpc/#network-layer","text":"How it works documentation: Networking","title":"Network Layer"},{"location":"user-guide/network/vpc/#user-guide","text":"Please follow the steps below to orchestrate your base-network layer, 1st in your project-shared AWS account and afterwards in the necessary member accounts which will host network connected resources (EC2, Lambda, EKS, RDS, ALB, NLB, etc): project-apps-devstg account. project-apps-prd account. Network layer standard creation workflow Please follow Terraform make workflow for each of your accounts. We'll start by project-shared AWS Account Update (add | remove | customize) your VPC associated code before deploying this layer shared/base-network Main files network.tf locals.tf Repeat for every AWS member Account that needs its own VPC Access AWS Organization member account consider repeating step 3. but for the corresponding member accounts.","title":"User guide"},{"location":"user-guide/network/vpc/#next-steps","text":"AWS VPC Peering","title":"Next Steps"},{"location":"user-guide/organization/organization/","text":"Reference Architecture: Terraform AWS Organizations Account Baseline \u00b6 How it works documentation: organization documentation: organization accounts User guide \u00b6 Pre-requisites \u00b6 You'll need an email to create and register your AWS Organization Root Account . For this purpose we recommend to avoid using an individual nominated email user. Instead, whenever possible, it should ideally be associated, with a distribution list email such as a GSuite Group to ensure the proper admins member's team (DevOps | SecOps | Cloud Engineering Team) to manage its notifications avoiding a single point of contact (constraint). Email setup example \u00b6 GSuite Group Email address: aws@domain.com (to which admins / owners belong), and then using the + we generate the aliases automatically implicitly when running Terraform's Leverage code. aws+security@flexibility.com.ar aws+shared@flexibility.com.ar aws+apps-devstg@flexibility.com.ar aws+apps-prd@flexibility.com.ar Important # # Project Prd: services and resources related to production are placed and # maintained here. # resource \"aws_organizations_account\" \"apps_prd\" { name = \"apps-prd\" email = \"aws+apps-prd@doamin.ar\" parent_id = aws_organizations_organizational_unit . apps_prd . id } Example \u00b6 Steps Create a brand new AWS Account , intended to be our AWS Organization Root Account Via AWS Web Console: in project-root create the root-org IAM user with Admin privileges, which will be use for the initial AWS Org bootstrapping. After it\u2019s 1st execution only nominated Org admin users will persist in the project-root account. The AWS Org will be orchestrated -> Leverage Ref Code Via AWS Web Console: from your project-root acconunt invite the pre-existing project-legacy (1 to n accounts). Via AWS Web Console: in project-legacy create the OrganizationAccountAccessRole IAM Role with Admin permissions. Should follow Creating the OrganizationAccountAccessRole in an invited member account section. Import your project-legacy account as code. Update the following variables in ./@bin/makefiles/terraform12/Makefile.terraform12-import-rm TF_IMPORT_RESOURCE := \"aws_organizations_organizational_unit.bbl_apps_devstg\" TF_IMPORT_RESOURCE_ID := \"ou-oz9d-yl3npduj\" TF_RM_RESOURCE := \"aws_organizations_organizational_unit.bbl_apps_devstg\" Then from the root context -> cd ./root/organizaton make import Recommended following configurations Identities Switch to the project-security account for consolidated and centralized User Mgmt and access to the AWS Org.","title":"Organization"},{"location":"user-guide/organization/organization/#reference-architecture-terraform-aws-organizations-account-baseline","text":"How it works documentation: organization documentation: organization accounts","title":"Reference Architecture: Terraform AWS Organizations Account Baseline"},{"location":"user-guide/organization/organization/#user-guide","text":"","title":"User guide"},{"location":"user-guide/organization/organization/#pre-requisites","text":"You'll need an email to create and register your AWS Organization Root Account . For this purpose we recommend to avoid using an individual nominated email user. Instead, whenever possible, it should ideally be associated, with a distribution list email such as a GSuite Group to ensure the proper admins member's team (DevOps | SecOps | Cloud Engineering Team) to manage its notifications avoiding a single point of contact (constraint).","title":"Pre-requisites"},{"location":"user-guide/organization/organization/#email-setup-example","text":"GSuite Group Email address: aws@domain.com (to which admins / owners belong), and then using the + we generate the aliases automatically implicitly when running Terraform's Leverage code. aws+security@flexibility.com.ar aws+shared@flexibility.com.ar aws+apps-devstg@flexibility.com.ar aws+apps-prd@flexibility.com.ar Important # # Project Prd: services and resources related to production are placed and # maintained here. # resource \"aws_organizations_account\" \"apps_prd\" { name = \"apps-prd\" email = \"aws+apps-prd@doamin.ar\" parent_id = aws_organizations_organizational_unit . apps_prd . id }","title":"Email setup example"},{"location":"user-guide/organization/organization/#example","text":"Steps Create a brand new AWS Account , intended to be our AWS Organization Root Account Via AWS Web Console: in project-root create the root-org IAM user with Admin privileges, which will be use for the initial AWS Org bootstrapping. After it\u2019s 1st execution only nominated Org admin users will persist in the project-root account. The AWS Org will be orchestrated -> Leverage Ref Code Via AWS Web Console: from your project-root acconunt invite the pre-existing project-legacy (1 to n accounts). Via AWS Web Console: in project-legacy create the OrganizationAccountAccessRole IAM Role with Admin permissions. Should follow Creating the OrganizationAccountAccessRole in an invited member account section. Import your project-legacy account as code. Update the following variables in ./@bin/makefiles/terraform12/Makefile.terraform12-import-rm TF_IMPORT_RESOURCE := \"aws_organizations_organizational_unit.bbl_apps_devstg\" TF_IMPORT_RESOURCE_ID := \"ou-oz9d-yl3npduj\" TF_RM_RESOURCE := \"aws_organizations_organizational_unit.bbl_apps_devstg\" Then from the root context -> cd ./root/organizaton make import Recommended following configurations Identities Switch to the project-security account for consolidated and centralized User Mgmt and access to the AWS Org.","title":"Example"},{"location":"user-guide/reliability/backups/","text":"","title":"Backups"},{"location":"user-guide/reliability/dr/","text":"","title":"Disaster Recovery"},{"location":"user-guide/reliability/health-checks/","text":"","title":"Health Checks"},{"location":"user-guide/secrets/secrets/","text":"","title":"Secrets"},{"location":"user-guide/security/services/","text":"AWS Security & Compliance Services \u00b6 How it works \u00b6 TODO User guide \u00b6 TODO","title":"Services"},{"location":"user-guide/security/services/#aws-security-compliance-services","text":"","title":"AWS Security &amp; Compliance Services"},{"location":"user-guide/security/services/#how-it-works","text":"TODO","title":"How it works"},{"location":"user-guide/security/services/#user-guide","text":"TODO","title":"User guide"},{"location":"user-guide/security/vpn/","text":"VPN Server \u00b6 How it works \u00b6 TODO User guide \u00b6 TODO","title":"VPN"},{"location":"user-guide/security/vpn/#vpn-server","text":"","title":"VPN Server"},{"location":"user-guide/security/vpn/#how-it-works","text":"TODO","title":"How it works"},{"location":"user-guide/security/vpn/#user-guide","text":"TODO","title":"User guide"},{"location":"user-guide/storage/storage/","text":"","title":"Storage"},{"location":"user-guide/tools/tools/","text":"","title":"Tools"}]}